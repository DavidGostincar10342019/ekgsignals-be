// EKG Analiza - Mobilna Web Aplikacija
class EKGAnalyzer {
    constructor() {
        this.currentImage = null;
        this.isProcessing = false;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.setupDragAndDrop();
        this.checkCameraSupport();
    }

    setupEventListeners() {
        // File input
        document.getElementById('fileInput').addEventListener('change', (e) => {
            this.handleFileSelect(e.target.files[0]);
        });

        // Camera input
        document.getElementById('cameraInput').addEventListener('change', (e) => {
            this.handleFileSelect(e.target.files[0]);
        });

        // Upload buttons
        document.getElementById('uploadBtn').addEventListener('click', () => {
            document.getElementById('fileInput').click();
        });

        document.getElementById('cameraBtn').addEventListener('click', () => {
            document.getElementById('cameraInput').click();
        });

        // Raw signal import button
        document.getElementById('rawSignalBtn').addEventListener('click', () => {
            this.toggleRawSignalInfo();
            document.getElementById('rawSignalInput').click();
        });

        // Raw signal file input
        document.getElementById('rawSignalInput').addEventListener('change', (e) => {
            if (e.target.files.length > 1) {
                // Multiple files - možda WFDB format
                this.handleWFDBFiles(e.target.files);
            } else {
                // Single file - CSV/TXT/JSON
                this.handleRawSignalFile(e.target.files[0]);
            }
        });

        // Analyze button
        document.getElementById('analyzeBtn').addEventListener('click', () => {
            this.analyzeImage();
        });

        // New analysis button
        document.getElementById('newAnalysisBtn').addEventListener('click', () => {
            this.resetApp();
        });

        // Generate EKG Image button (will be added dynamically)
        document.addEventListener('click', (e) => {
            if (e.target && e.target.id === 'generateEkgImageBtn') {
                this.generateEducationalEkgImage();
            }
        });
    }

    setupDragAndDrop() {
        const uploadArea = document.getElementById('uploadArea');
        
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => {
                uploadArea.classList.add('dragover');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => {
                uploadArea.classList.remove('dragover');
            }, false);
        });

        uploadArea.addEventListener('drop', (e) => {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFileSelect(files[0]);
            }
        }, false);
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    checkCameraSupport() {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            document.getElementById('cameraBtn').style.display = 'none';
        }
    }

    handleFileSelect(file) {
        if (!file) return;

        // Validate file type
        if (!file.type.startsWith('image/')) {
            this.showError('Molimo odaberite sliku (JPG, PNG, itd.)');
            return;
        }

        // Validate file size (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
            this.showError('Slika je prevelika. Maksimalna veličina je 10MB.');
            return;
        }

        this.currentImage = file;
        this.displayImagePreview(file);
    }

    displayImagePreview(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const previewSection = document.getElementById('imagePreview');
            const previewImage = document.getElementById('previewImage');
            const imageInfo = document.getElementById('imageInfo');

            previewImage.src = e.target.result;
            previewSection.style.display = 'block';

            // Show image info
            const fileSize = (file.size / 1024).toFixed(1);
            imageInfo.innerHTML = `
                <strong>📁 Naziv:</strong> ${file.name}<br>
                <strong>📏 Veličina:</strong> ${fileSize} KB<br>
                <strong>📅 Tip:</strong> ${file.type}
            `;

            // Enable analyze button
            document.getElementById('analyzeBtn').disabled = false;
            
            // Show debug button
            const debugBtn = document.getElementById('debugVizBtn');
            if (debugBtn) {
                debugBtn.style.display = 'inline-block';
            }
            
            // Add bounce animation
            previewSection.classList.add('bounce');
            setTimeout(() => {
                previewSection.classList.remove('bounce');
            }, 600);
        };
        reader.readAsDataURL(file);
    }

    async analyzeImage() {
        if (!this.currentImage || this.isProcessing) return;

        this.isProcessing = true;
        this.showUploadProgress();

        try {
            // Convert image to base64 with progress
            const base64Image = await this.fileToBase64WithProgress(this.currentImage);
            
            // Update progress for upload
            this.updateProgress(50, 'Šalje sliku na server...', '📤');
            
            // Send to complete analysis API
            const response = await fetch('/api/analyze/complete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    image: base64Image,
                    fs: 250
                })
            });

            this.updateProgress(75, 'Obrađuje sliku...', '🔬');

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.error) {
                throw new Error(result.error);
            }

            this.updateProgress(100, 'Analiza završena!', '✅');
            
            // Store results for PDF generation
            window.currentAnalysisResults = result;
            this.analysisData = result; // Ensure analysisData is stored in the instance
            
            // Hide progress and show results
            setTimeout(() => {
                this.hideUploadProgress();
                this.displayResults(result);
            }, 500);
            
        } catch (error) {
            console.error('Analysis error:', error);
            this.hideUploadProgress();
            this.showError(`Greška pri analizi: ${error.message}`);
        } finally {
            this.isProcessing = false;
        }
    }

    fileToBase64WithProgress(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onloadstart = () => {
                this.updateProgress(10, 'Čita sliku...', '📖');
            };
            
            reader.onprogress = (e) => {
                if (e.lengthComputable) {
                    const progress = Math.round((e.loaded / e.total) * 30) + 10; // 10-40%
                    this.updateProgress(progress, 'Konvertuje sliku...', '🔄');
                }
            };
            
            reader.onload = () => {
                this.updateProgress(40, 'Priprema za slanje...', '📦');
                resolve(reader.result);
            };
            
            reader.onerror = error => reject(error);
            reader.readAsDataURL(file);
        });
    }

    showUploadProgress() {
        document.getElementById('uploadSection').style.display = 'none';
        document.getElementById('uploadProgress').style.display = 'block';
        this.updateProgress(0, 'Priprema...', '⏳');
    }

    hideUploadProgress() {
        document.getElementById('uploadProgress').style.display = 'none';
        document.getElementById('uploadSection').style.display = 'block';
    }

    updateProgress(percentage, message, icon = '') {
        const progressBar = document.getElementById('progressBar');
        const progressPercentage = document.querySelector('.progress-percentage');
        const progressDetails = document.getElementById('progressDetails');
        
        progressBar.style.width = `${percentage}%`;
        progressPercentage.textContent = `${percentage}%`;
        progressDetails.textContent = `${icon} ${message}`;
        
        // Add upload speed simulation
        if (percentage > 10 && percentage < 90) {
            const uploadSpeed = document.getElementById('uploadSpeed');
            const speeds = ['1.2 MB/s', '0.8 MB/s', '1.5 MB/s', '0.9 MB/s'];
            uploadSpeed.textContent = `(${speeds[Math.floor(Math.random() * speeds.length)]})`;
        }
    }

    displayResults(data) {
        // Hide processing
        document.getElementById('processingSection').style.display = 'none';
        
        // Show results
        const resultsSection = document.getElementById('resultsSection');
        resultsSection.style.display = 'block';

        // Store data for detailed analysis
        this.analysisData = data;

        // Populate structured results
        if (data.advanced_cardiology && !data.advanced_cardiology.error) {
            console.log('✅ Using advanced cardiology analysis');
            this.populateAdvancedCardiologyResults(data);
        } else {
            console.log('⚠️ Using basic structured results');
            this.populateStructuredResults(data);
        }
        
        // VRAĆENO v3.1: Optimizovane vizuelizacije
        if (data.thesis_visualizations && !data.thesis_visualizations.error) {
            console.log('📊 v3.1 Using OPTIMIZED thesis visualizations');
            this.addThesisVisualizations(data.thesis_visualizations);
        } else {
            console.log('⚠️ v3.1 No thesis visualizations available');
        }

        // NOVO: Sistematska EKG analiza
        this.addSystematicEKGAnalysis(data);

        // Scroll to results
        resultsSection.scrollIntoView({ behavior: 'smooth' });
    }

    populateSignalInfo(signalInfo) {
        if (!signalInfo) return;
        
        document.getElementById('signalLength').textContent = signalInfo.length;
        document.getElementById('signalDuration').textContent = `${signalInfo.duration_seconds.toFixed(1)}s`;
        document.getElementById('samplingRate').textContent = `${signalInfo.sampling_frequency} Hz`;
    }

    populateHeartRateInfo(heartRate) {
        if (!heartRate) return;

        document.getElementById('avgBPM').textContent = `${heartRate.average_bpm.toFixed(1)} bpm`;
        document.getElementById('minBPM').textContent = `${heartRate.min_bpm.toFixed(1)} bpm`;
        document.getElementById('maxBPM').textContent = `${heartRate.max_bpm.toFixed(1)} bpm`;
        document.getElementById('hrv').textContent = `${heartRate.heart_rate_variability.toFixed(1)} ms`;
        document.getElementById('rPeaks').textContent = heartRate.rr_count || 0;
        
        // NOVO: QRS širina ako postoji
        const qrsAnalysis = this.analysisData?.arrhythmia_detection?.qrs_analysis;
        if (qrsAnalysis && !qrsAnalysis.error) {
            // Dodaj QRS info u postojeći prikaz
            const hrvElement = document.getElementById('hrv');
            if (hrvElement && hrvElement.parentNode) {
                const qrsInfo = document.createElement('div');
                qrsInfo.className = 'metric';
                qrsInfo.innerHTML = `
                    <span class="metric-label">QRS širina:</span>
                    <span class="metric-value">${qrsAnalysis.mean_width_ms.toFixed(1)} ms (${qrsAnalysis.classification})</span>
                `;
                hrvElement.parentNode.appendChild(qrsInfo);
            }
        }
    }

    populateArrhythmias(arrhythmias) {
        const container = document.getElementById('arrhythmiasList');
        
        if (!arrhythmias || !arrhythmias.detected || arrhythmias.detected.length === 0) {
            container.innerHTML = '<div class="arrhythmia-item severity-low">✅ Nema detektovanih aritmija</div>';
            return;
        }

        container.innerHTML = arrhythmias.detected.map(arr => `
            <div class="arrhythmia-item severity-${arr.severity}">
                <div class="arrhythmia-type">⚠️ ${arr.type}</div>
                <div class="arrhythmia-desc">${arr.description}</div>
                <div class="arrhythmia-desc"><strong>Vrednost:</strong> ${arr.value}</div>
            </div>
        `).join('');
    }

    populateFFTInfo(fftData) {
        if (!fftData) return;

        document.getElementById('peakFreq').textContent = `${fftData.peak_frequency_hz.toFixed(2)} Hz`;
        document.getElementById('peakAmp').textContent = fftData.peak_amplitude.toFixed(4);
        
        // NOVO: Sine Wave analiza u FFT sekciji
        const sineWaveData = fftData.sine_wave_analysis;
        if (sineWaveData && !sineWaveData.error) {
            const fftContainer = document.getElementById('peakAmp').parentNode.parentNode;
            if (fftContainer) {
                const sineWaveInfo = document.createElement('div');
                sineWaveInfo.className = 'metric';
                sineWaveInfo.innerHTML = `
                    <span class="metric-label">Sinusoidalnost:</span>
                    <span class="metric-value">${sineWaveData.spectral_purity_percent.toFixed(1)}% (${sineWaveData.signal_classification})</span>
                `;
                fftContainer.appendChild(sineWaveInfo);
                
                if (sineWaveData.detected_harmonics.length > 0) {
                    const harmonicsInfo = document.createElement('div');
                    harmonicsInfo.className = 'metric';
                    harmonicsInfo.innerHTML = `
                        <span class="metric-label">Harmonici:</span>
                        <span class="metric-value">${sineWaveData.total_harmonics_count} detektovano, THD: ${sineWaveData.thd_percent.toFixed(1)}%</span>
                    `;
                    fftContainer.appendChild(harmonicsInfo);
                }
            }
        }
    }

    populateSignalQuality(quality) {
        if (!quality) return;

        document.getElementById('signalQuality').textContent = quality.quality;
        document.getElementById('snrValue').textContent = `${quality.snr_db.toFixed(1)} dB`;
    }

    populateOverallAssessment(assessment) {
        if (!assessment) return;

        const statusDiv = document.getElementById('healthStatus');
        statusDiv.textContent = assessment;

        // Set appropriate class based on assessment
        statusDiv.className = 'health-status';
        if (assessment.includes('Normalan')) {
            statusDiv.classList.add('status-normal');
        } else if (assessment.includes('medicinska pažnja')) {
            statusDiv.classList.add('status-danger');
        } else {
            statusDiv.classList.add('status-warning');
        }
    }

    showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i> <span>${message}</span>`;
        errorDiv.style.display = 'block';
        
        setTimeout(() => {
            errorDiv.style.display = 'none';
        }, 5000);
    }

    showSuccess(message) {
        const successDiv = document.getElementById('successMessage');
        successDiv.textContent = message;
        successDiv.style.display = 'block';
        
        setTimeout(() => {
            successDiv.style.display = 'none';
        }, 3000);
    }

    resetApp() {
        // Reset state
        this.currentImage = null;
        this.isProcessing = false;
        this.analysisData = null;

        // Hide sections
        document.getElementById('imagePreview').style.display = 'none';
        document.getElementById('processingSection').style.display = 'none';
        document.getElementById('resultsSection').style.display = 'none';
        document.getElementById('errorMessage').style.display = 'none';
        document.getElementById('successMessage').style.display = 'none';
        document.getElementById('rawSignalInfo').style.display = 'none';

        // Show upload section
        document.getElementById('uploadSection').style.display = 'block';

        // Reset buttons
        document.getElementById('analyzeBtn').disabled = true;

        // Reset file inputs
        document.getElementById('fileInput').value = '';
        document.getElementById('cameraInput').value = '';
        document.getElementById('rawSignalInput').value = '';

        // Scroll to top
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    // Raw Signal Import Functions
    toggleRawSignalInfo() {
        const infoDiv = document.getElementById('rawSignalInfo');
        if (infoDiv.style.display === 'none' || !infoDiv.style.display) {
            infoDiv.style.display = 'block';
        } else {
            infoDiv.style.display = 'none';
        }
    }

    async handleRawSignalFile(file) {
        if (!file) return;

        try {
            // Show progress
            this.showUploadProgress();
            this.updateProgress(10, 'Čita fajl...', '📂');

            // Parse the file based on extension
            const signal = await this.parseRawSignalFile(file);
            
            if (!signal || signal.length === 0) {
                throw new Error('Nije moguće pročitati signal iz fajla');
            }

            this.updateProgress(30, 'Validira signal...', '✅');

            // Get sampling frequency
            const fs = parseInt(document.getElementById('rawSignalFs').value) || 250;

            // Validate signal
            if (signal.length < 100) {
                throw new Error('Signal je prekratak (minimum 100 uzoraka)');
            }

            if (signal.length > 100000) {
                throw new Error('Signal je predugačak (maksimum 100,000 uzoraka)');
            }

            this.updateProgress(50, 'Šalje signal na analizu...', '📤');

            // Send to raw signal analysis API
            const response = await fetch('/api/analyze/raw-signal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    signal: signal,
                    fs: fs,
                    filename: file.name
                })
            });

            this.updateProgress(75, 'Analizira signal...', '🔬');

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Greška pri analizi');
            }

            const result = await response.json();
            
            if (result.error) {
                throw new Error(result.error);
            }

            this.updateProgress(100, 'Analiza završena!', '✅');

            // Hide progress and show results
            setTimeout(() => {
                this.hideUploadProgress();
                this.displayRawSignalResults(result, file.name, signal.length, fs);
            }, 500);

        } catch (error) {
            console.error('Raw signal analysis error:', error);
            this.hideUploadProgress();
            this.showError(`Greška pri analizi sirovih podataka: ${error.message}`);
        }
    }

    async parseRawSignalFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const content = e.target.result;
                    const extension = file.name.split('.').pop().toLowerCase();
                    let signal = [];

                    if (extension === 'json') {
                        const data = JSON.parse(content);
                        if (data.signal && Array.isArray(data.signal)) {
                            signal = data.signal.map(Number);
                            if (data.fs) {
                                document.getElementById('rawSignalFs').value = data.fs;
                            }
                        } else {
                            throw new Error('JSON fajl mora imati "signal" niz');
                        }
                    } else if (extension === 'csv' || extension === 'txt') {
                        const lines = content.trim().split(/[\n\r,;\s]+/);
                        signal = lines
                            .filter(line => line.trim() !== '')
                            .map(value => {
                                const num = parseFloat(value.trim());
                                if (isNaN(num)) {
                                    throw new Error(`Neispravna vrednost: "${value}"`);
                                }
                                return num;
                            });
                    } else {
                        throw new Error('Nepodržan format fajla. Koristite CSV, TXT ili JSON.');
                    }

                    if (signal.some(val => isNaN(val) || !isFinite(val))) {
                        throw new Error('Signal sadrži neispravne vrednosti (NaN ili beskonačno)');
                    }

                    resolve(signal);
                } catch (error) {
                    reject(error);
                }
            };

            reader.onerror = () => reject(new Error('Greška pri čitanju fajla'));
            reader.readAsText(file);
        });
    }

    displayRawSignalResults(data, filename, signalLength, fs) {
        // Hide upload section and show results
        document.getElementById('uploadSection').style.display = 'none';
        document.getElementById('resultsSection').style.display = 'block';

        // Store data for detailed analysis
        this.analysisData = data;

        // Show generate EKG image button for raw signal data
        this.showGenerateImageButton(data);

        // Add special header for raw signal
        const resultsSection = document.getElementById('resultsSection');
        const existingHeader = resultsSection.querySelector('.raw-signal-header');
        if (existingHeader) {
            existingHeader.remove();
        }

        const headerDiv = document.createElement('div');
        headerDiv.className = 'raw-signal-header';
        headerDiv.innerHTML = `
            <div style="background: #e8f5e8; padding: 15px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #27ae60;">
                <h3 style="margin: 0 0 10px 0;"><i class="fas fa-file-import"></i> Analiza Sirovih EKG Podataka</h3>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div><strong>📁 Fajl:</strong> ${filename}</div>
                    <div><strong>📊 Uzorci:</strong> ${signalLength.toLocaleString()}</div>
                    <div><strong>⏱️ Trajanje:</strong> ${(signalLength / fs).toFixed(1)}s</div>
                    <div><strong>📡 Fs:</strong> ${fs} Hz</div>
                </div>
            </div>
        `;
        
        resultsSection.insertBefore(headerDiv, resultsSection.firstChild);

        // Populate results as usual
        this.populateSignalInfo(data.signal_info);
        this.populateHeartRateInfo(data.arrhythmia_detection?.heart_rate);
        this.populateArrhythmias(data.arrhythmia_detection?.arrhythmias);
        this.populateFFTInfo(data.fft_analysis);
        this.populateSignalQuality(data.arrhythmia_detection?.signal_quality);
        this.populateOverallAssessment(data.arrhythmia_detection?.arrhythmias?.overall_assessment);

        // Scroll to results
        resultsSection.scrollIntoView({ behavior: 'smooth' });
    }

    // WFDB Files Handler
    async handleWFDBFiles(files) {
        try {
            // Proveri da li imamo .dat i .hea fajlove
            let hasDat = false;
            let hasHea = false;
            
            for (let file of files) {
                if (file.name.endsWith('.dat')) hasDat = true;
                if (file.name.endsWith('.hea')) hasHea = true;
            }
            
            if (!hasDat || !hasHea) {
                if (files.length === 1) {
                    await this.handleRawSignalFile(files[0]);
                    return;
                }
                
                this.showError('Za WFDB format potrebni su i .dat i .hea fajlovi');
                return;
            }
            
            this.showUploadProgress();
            this.updateProgress(10, 'Čita WFDB fajlove...', '📂');
            
            // Kreiraj FormData za upload
            const formData = new FormData();
            
            for (let file of files) {
                if (file.name.endsWith('.dat') || file.name.endsWith('.hea') || 
                    file.name.endsWith('.atr') || file.name.endsWith('.xws')) {
                    formData.append('file', file);
                }
            }
            
            this.updateProgress(30, 'Upload WFDB fajlova...', '📤');
            
            // Pošalji na WFDB endpoint
            const response = await fetch('/api/analyze/wfdb', {
                method: 'POST',
                body: formData
            });
            
            this.updateProgress(75, 'Analizira WFDB signal...', '🔬');
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Greška pri analizi WFDB fajlova');
            }
            
            const result = await response.json();
            
            if (result.error) {
                throw new Error(result.error);
            }
            
            this.updateProgress(100, 'WFDB analiza završena!', '✅');
            
            // Hide progress and show results
            setTimeout(() => {
                this.hideUploadProgress();
                this.displayWFDBResults(result);
            }, 500);
            
        } catch (error) {
            console.error('WFDB analysis error:', error);
            this.hideUploadProgress();
            this.showError(`Greška pri analizi WFDB fajlova: ${error.message}`);
        }
    }

    displayWFDBResults(data) {
        // Hide upload section and show results
        document.getElementById('uploadSection').style.display = 'none';
        document.getElementById('resultsSection').style.display = 'block';

        // Store data for detailed analysis
        this.analysisData = data;

        // Show generate EKG image button for WFDB data
        this.showGenerateImageButton(data);

        // Add enhanced header for WFDB
        const resultsSection = document.getElementById('resultsSection');
        const existingHeader = resultsSection.querySelector('.wfdb-header');
        if (existingHeader) {
            existingHeader.remove();
        }

        const headerDiv = document.createElement('div');
        headerDiv.className = 'wfdb-header';
        
        // Prepare WFDB metadata display
        const recordName = data.wfdb_metadata?.record_name || data.signal_info.filename?.replace('.dat', '') || 'Unknown';
        const hasAnnotations = data.signal_info.has_annotations || false;
        const nChannels = data.wfdb_metadata?.n_signals || 1;
        const originalSamples = data.wfdb_metadata?.original_samples || data.signal_info.length;
        
        // Create comprehensive WFDB info
        let wfdbFilesInfo = `📁 Record: ${recordName}`;
        if (hasAnnotations) {
            wfdbFilesInfo += ` <span style="color: #27ae60; font-weight: bold;">(.dat + .hea + .atr)</span>`;
        } else {
            wfdbFilesInfo += ` <span style="color: #f39c12;">(.dat + .hea)</span>`;
        }
        
        // Annotations info
        let annotationsInfo = '';
        if (data.annotations) {
            annotationsInfo = `
                <div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <strong>🏥 MIT-BIH Annotations (.atr):</strong><br>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 5px;">
                        <div>📍 R-peaks: ${data.annotations.r_peaks_count || 0}</div>
                        <div>⚠️ Aritmije: ${data.annotations.arrhythmias_count || 0}</div>
                        <div>📊 Ukupno annotations: ${data.annotations.total_annotations || 0}</div>
                        <div>📂 Fajl: ${data.annotations.source_file || 'N/A'}</div>
                    </div>
                </div>
            `;
        }
        
        headerDiv.innerHTML = `
            <div style="background: #e3f2fd; padding: 15px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #2196f3;">
                <h3 style="margin: 0 0 10px 0;"><i class="fas fa-database"></i> WFDB MIT-BIH Analiza</h3>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div>${wfdbFilesInfo}</div>
                    <div><strong>📊 Analizirani uzorci:</strong> ${data.signal_info.length.toLocaleString()}</div>
                    <div><strong>⏱️ Trajanje:</strong> ${data.signal_info.duration_seconds.toFixed(1)}s</div>
                    <div><strong>📡 Fs:</strong> ${data.signal_info.sampling_frequency} Hz</div>
                    <div><strong>📺 Kanali:</strong> ${nChannels} (korišćen kanal 0)</div>
                    <div><strong>📋 Originalni uzorci:</strong> ${originalSamples.toLocaleString()}</div>
                </div>
                ${annotationsInfo}
                ${data.signal_info.original_shape ? 
                    `<div style="margin-top: 10px; padding: 8px; background: #f0f8ff; border-radius: 5px; font-size: 0.9rem;">
                        <strong>ℹ️ WFDB Info:</strong> 
                        Originalna veličina: ${data.signal_info.original_shape.join(' × ')}, 
                        Import metod: ${data.signal_info.import_method}
                    </div>` : ''
                }
            </div>
        `;
        
        resultsSection.insertBefore(headerDiv, resultsSection.firstChild);

        // Populate results as usual
        this.populateSignalInfo(data.signal_info);
        this.populateHeartRateInfo(data.arrhythmia_detection?.heart_rate);
        this.populateArrhythmias(data.arrhythmia_detection?.arrhythmias);
        this.populateFFTInfo(data.fft_analysis);
        this.populateSignalQuality(data.arrhythmia_detection?.signal_quality);
        this.populateOverallAssessment(data.arrhythmia_detection?.arrhythmias?.overall_assessment);

        // Scroll to results
        resultsSection.scrollIntoView({ behavior: 'smooth' });
    }

    // Show generate image button for raw signal/WFDB data
    showGenerateImageButton(data) {
        if (data.signal_info && data.signal_info.source && 
            (data.signal_info.source === 'raw_import' || data.signal_info.source === 'wfdb_import')) {
            
            // Find action buttons container
            let actionButtonsContainer = document.querySelector('.action-buttons');
            if (!actionButtonsContainer) {
                // Create action buttons container if it doesn't exist
                actionButtonsContainer = document.createElement('div');
                actionButtonsContainer.className = 'action-buttons';
                actionButtonsContainer.style.marginTop = '20px';
                
                const resultsSection = document.getElementById('resultsSection');
                resultsSection.appendChild(actionButtonsContainer);
            }

            // Check if button already exists
            if (!document.getElementById('generateEkgImageBtn')) {
                const generateBtn = document.createElement('button');
                generateBtn.id = 'generateEkgImageBtn';
                generateBtn.className = 'btn btn-primary';
                generateBtn.innerHTML = '<i class="fas fa-image"></i> Generiši EKG Sliku';
                generateBtn.style.margin = '5px';
                
                actionButtonsContainer.appendChild(generateBtn);
                console.log('✅ Generate EKG image button added');
            }
        }
    }

    // Generate EKG image from raw signal data
    async generateEducationalEkgImage() {
        if (!this.analysisData || !this.analysisData.signal_info) {
            this.showError('Nema dostupnih podataka za generisanje slike');
            return;
        }

        try {
            this.showUploadProgress();
            this.updateProgress(10, 'Priprema podatke za sliku...', '🖼️');

            const signal_info = this.analysisData.signal_info;
            
            // Determine if this is WFDB or raw signal
            let endpoint = '';
            let payload = {};

            if (signal_info.source === 'wfdb_import') {
                // For WFDB, we need to call the WFDB-to-image endpoint
                // But we don't have original files, so we'll use the extracted signal
                endpoint = '/api/convert/signal-to-image';
                payload = {
                    signal: this.analysisData.extracted_signal || [], // Need to store this during analysis
                    fs: signal_info.sampling_frequency,
                    style: 'clinical',
                    duration_seconds: 1 // Generate 1-second focused EKG
                };
                
                if (!payload.signal || payload.signal.length === 0) {
                    throw new Error('Sirovi signal nije dostupan za generisanje slike. Potrebno je ponovo analizirati WFDB fajlove.');
                }
            } else {
                // For raw signal import
                endpoint = '/api/convert/signal-to-image';
                payload = {
                    signal: this.analysisData.raw_signal || [],
                    fs: signal_info.sampling_frequency,
                    style: 'clinical',
                    duration_seconds: 1
                };
                
                if (!payload.signal || payload.signal.length === 0) {
                    throw new Error('Sirovi signal nije dostupan za generisanje slike.');
                }
            }

            this.updateProgress(30, 'Šalje zahtev za sliku...', '📤');

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            this.updateProgress(70, 'Generiše EKG sliku...', '🎨');

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Greška pri generisanju slike');
            }

            const result = await response.json();
            
            if (result.error) {
                throw new Error(result.error);
            }

            this.updateProgress(100, 'Slika generisana!', '✅');

            // Hide progress and show generated image
            setTimeout(() => {
                this.hideUploadProgress();
                this.displayGeneratedImage(result);
            }, 500);

        } catch (error) {
            console.error('Image generation error:', error);
            this.hideUploadProgress();
            this.showError(`Greška pri generisanju EKG slike: ${error.message}`);
        }
    }

    // Display generated EKG image
    displayGeneratedImage(imageData) {
        // Create or show generated image section
        let generatedSection = document.getElementById('generatedImageSection');
        if (!generatedSection) {
            generatedSection = document.createElement('div');
            generatedSection.id = 'generatedImageSection';
            generatedSection.className = 'main-card';
            generatedSection.style.marginTop = '20px';
            
            const resultsSection = document.getElementById('resultsSection');
            resultsSection.parentNode.insertBefore(generatedSection, resultsSection.nextSibling);
        }

        generatedSection.innerHTML = `
            <h2><i class="fas fa-image"></i> Generisana EKG Slika</h2>
            
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-image result-icon" style="color: #27ae60;"></i>
                    <h3 class="result-title">EKG Slika iz Sirovih Podataka</h3>
                </div>
                <div class="result-content">
                    <div style="text-align: center; margin: 20px 0;">
                        <img src="data:image/png;base64,${imageData.image_base64}" 
                             style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px;" 
                             alt="Generisana EKG slika">
                    </div>
                    
                    <div style="background: #f8f9ff; padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h4><i class="fas fa-info-circle"></i> Informacije o slici:</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 10px;">
                            <div><strong>📏 Trajanje:</strong> ${imageData.signal_info?.duration_seconds?.toFixed(1) || 'N/A'}s</div>
                            <div><strong>📊 Uzorci:</strong> ${imageData.signal_info?.used_segment_length?.toLocaleString() || 'N/A'}</div>
                            <div><strong>📡 Fs:</strong> ${imageData.signal_info?.sampling_frequency || 'N/A'} Hz</div>
                            <div><strong>🎨 Stil:</strong> ${imageData.signal_info?.style || 'clinical'}</div>
                        </div>
                        ${imageData.signal_info?.segmentation_used ? 
                            `<div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin-top: 10px;">
                                <strong>🎯 Inteligentna segmentacija:</strong> Korišćen najkritičniji deo signala 
                                (${imageData.signal_info.segment_start_time?.toFixed(1)}-${imageData.signal_info.segment_end_time?.toFixed(1)}s)
                                sa kritičnošću ${imageData.signal_info.criticality_score?.toFixed(1)}
                            </div>` : ''
                        }
                    </div>
                    
                    <div style="text-align: center; margin-top: 15px;">
                        <button id="downloadImageBtn" class="btn btn-secondary" style="margin: 5px;">
                            <i class="fas fa-download"></i>
                            Sačuvaj Sliku
                        </button>
                        <button id="analyzeGeneratedImageBtn" class="btn btn-primary" style="margin: 5px;">
                            <i class="fas fa-chart-line"></i>
                            Analiziraj Generisanu Sliku
                        </button>
                    </div>
                </div>
            </div>
        `;

        generatedSection.style.display = 'block';
        generatedSection.scrollIntoView({ behavior: 'smooth' });

        // Store generated image data
        this.generatedImageData = imageData;

        // Add event listeners for new buttons
        const downloadBtn = document.getElementById('downloadImageBtn');
        const analyzeBtn = document.getElementById('analyzeGeneratedImageBtn');

        if (downloadBtn) {
            downloadBtn.onclick = () => this.downloadGeneratedImage();
        }

        if (analyzeBtn) {
            analyzeBtn.onclick = () => this.analyzeGeneratedImage();
        }

        this.showSuccess('✅ EKG slika uspešno generisana iz sirovih podataka!');
    }

    // Download generated image
    downloadGeneratedImage() {
        if (!this.generatedImageData) {
            this.showError('Nema generisane slike za preuzimanje');
            return;
        }

        try {
            // Create download link
            const link = document.createElement('a');
            link.href = `data:image/png;base64,${this.generatedImageData.image_base64}`;
            link.download = `ekg-slika-${new Date().toISOString().slice(0,10)}.png`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            this.showSuccess('Slika je preuzeta!');
        } catch (error) {
            this.showError('Greška pri preuzimanju slike');
        }
    }

    // Analyze generated image
    async analyzeGeneratedImage() {
        if (!this.generatedImageData) {
            this.showError('Nema generisane slike za analizu');
            return;
        }

        try {
            this.showUploadProgress();
            this.updateProgress(10, 'Analizira generisanu sliku...', '🔍');

            const response = await fetch('/api/analyze/complete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    image: `data:image/png;base64,${this.generatedImageData.image_base64}`,
                    fs: 250,
                    skip_validation: true // Skip validation since this is our generated image
                })
            });

            this.updateProgress(75, 'Obrađuje analizu...', '🔬');

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.error) {
                throw new Error(result.error);
            }

            this.updateProgress(100, 'Analiza završena!', '✅');

            setTimeout(() => {
                this.hideUploadProgress();
                // Show comparison results
                this.displayImageAnalysisComparison(result);
            }, 500);

        } catch (error) {
            console.error('Generated image analysis error:', error);
            this.hideUploadProgress();
            this.showError(`Greška pri analizi generisane slike: ${error.message}`);
        }
    }

    // Display comparison between original and generated image analysis
    displayImageAnalysisComparison(newAnalysis) {
        const comparisonSection = document.createElement('div');
        comparisonSection.className = 'main-card';
        comparisonSection.style.marginTop = '20px';
        comparisonSection.innerHTML = `
            <h2><i class="fas fa-balance-scale"></i> Poređenje Analize</h2>
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-line result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">Originalni vs Generisana Slika</h3>
                </div>
                <div class="result-content">
                    <div style="background: #e8f5e8; padding: 15px; border-radius: 8px;">
                        <strong>✅ Uspešno testiranje:</strong> Signal → Slika → Analiza petlja je kompletirana!
                        <br><br>
                        <strong>📊 Poređenje rezultata:</strong>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;">
                            <div>
                                <strong>Originalni signal:</strong><br>
                                Uzorci: ${this.analysisData.signal_info.length.toLocaleString()}<br>
                                Trajanje: ${this.analysisData.signal_info.duration_seconds.toFixed(1)}s<br>
                                BPM: ${this.analysisData.arrhythmia_detection?.heart_rate?.average_bpm?.toFixed(1) || 'N/A'}
                            </div>
                            <div>
                                <strong>Iz generisane slike:</strong><br>
                                Uzorci: ${newAnalysis.signal_info.length.toLocaleString()}<br>
                                Trajanje: ${newAnalysis.signal_info.duration_seconds.toFixed(1)}s<br>
                                BPM: ${newAnalysis.arrhythmia_detection?.heart_rate?.average_bpm?.toFixed(1) || 'N/A'}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        const generatedSection = document.getElementById('generatedImageSection');
        generatedSection.parentNode.insertBefore(comparisonSection, generatedSection.nextSibling);
        
        comparisonSection.scrollIntoView({ behavior: 'smooth' });
        this.showSuccess('Poređenje analize završeno!');
    }

    // NOVO: Strukturirani prikaz rezultata sa jasnim razlikovanjem R-pikova
    populateStructuredResults(data) {
        // Clear existing results content and replace with structured format
        const resultsSection = document.getElementById('resultsSection');
        
        // Keep the header, but replace the content after it
        const existingHeader = resultsSection.querySelector('.raw-signal-header, .wfdb-header');
        const headerHTML = existingHeader ? existingHeader.outerHTML : '';
        
        // Overall health status first
        const overallAssessment = data.arrhythmia_detection?.arrhythmias?.overall_assessment || 'Analiza završena';
        let statusClass = 'status-normal';
        if (overallAssessment.includes('medicinska pažnja')) {
            statusClass = 'status-danger';
        } else if (overallAssessment.includes('konsultacija') || overallAssessment.includes('nepravilnosti')) {
            statusClass = 'status-warning';
        }

        // Build structured content
        const structuredHTML = `
            ${headerHTML}
            
            <!-- Overall Health Status -->
            <div id="healthStatus" class="health-status ${statusClass}">
                ${overallAssessment}
            </div>

            <!-- 1. OPŠTI PODACI -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-info-circle result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">1. Opšti Podaci o Signalu</h3>
                </div>
                <div class="result-content">
                    <div class="metric">
                        <span class="metric-label">Broj analiziranih uzoraka:</span>
                        <span class="metric-value">${data.signal_info?.length?.toLocaleString() || 'N/A'}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Trajanje analize:</span>
                        <span class="metric-value">${data.signal_info?.duration_seconds?.toFixed(1) || 'N/A'}s</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Frekvencija uzorkovanja:</span>
                        <span class="metric-value">${data.signal_info?.sampling_frequency || 'N/A'} Hz</span>
                    </div>
                    ${data.wfdb_metadata?.original_samples ? `
                    <div class="metric">
                        <span class="metric-label">Originalni zapis (ukupno):</span>
                        <span class="metric-value">${data.wfdb_metadata.original_samples.toLocaleString()} uzoraka (${(data.wfdb_metadata.original_samples / data.signal_info.sampling_frequency / 60).toFixed(1)} min)</span>
                    </div>
                    <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin-top: 10px; font-size: 0.9rem; border-left: 4px solid #ff9800;">
                        <strong>📝 Važna napomena o segmentaciji:</strong><br><br>
                        Analiziran je <strong>segment od ${data.signal_info.length.toLocaleString()} uzoraka</strong> 
                        iz ukupnog zapisa od <strong>${data.wfdb_metadata.original_samples.toLocaleString()} uzoraka</strong>.<br><br>
                        
                        <strong>Razlog:</strong> Veliki WFDB fajlovi se analiziraju u segmentima zbog performansi. 
                        Svi R-pikovi i aritmije se odnose na ovaj analizirani segment, ne na ceo zapis.<br><br>
                        
                        <strong>Segment:</strong> Prvi deo zapisa (${(data.signal_info.length / data.signal_info.sampling_frequency / 60).toFixed(1)} min od ukupno ${(data.wfdb_metadata.original_samples / data.signal_info.sampling_frequency / 60).toFixed(1)} min)
                    </div>
                    ` : ''}
                </div>
            </div>

            <!-- 2. SRČANI RITAM -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-heartbeat result-icon" style="color: #e74c3c;"></i>
                    <h3 class="result-title">2. Srčani Ritam</h3>
                </div>
                <div class="result-content">
                    <div class="metric">
                        <span class="metric-label">Prosečna frekvencija:</span>
                        <span class="metric-value">${data.arrhythmia_detection?.heart_rate?.average_bpm?.toFixed(1) || 'N/A'} bpm</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Minimalna frekvencija:</span>
                        <span class="metric-value">${data.arrhythmia_detection?.heart_rate?.min_bpm?.toFixed(1) || 'N/A'} bpm</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Maksimalna frekvencija:</span>
                        <span class="metric-value">${data.arrhythmia_detection?.heart_rate?.max_bpm?.toFixed(1) || 'N/A'} bpm</span>
                    </div>
                </div>
            </div>

            <!-- 3. R-PIKOVI - JASNO RAZLIKOVANJE -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-line result-icon" style="color: #9b59b6;"></i>
                    <h3 class="result-title">3. Analiza R-pikova</h3>
                </div>
                <div class="result-content">
                    <!-- Detektovani R-pikovi iz signala -->
                    <div style="background: #f8f9ff; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <h4 style="margin: 0 0 10px 0; color: #667eea;">
                            <i class="fas fa-search"></i> Detektovani iz signala (algoritam):
                        </h4>
                        <div class="metric">
                            <span class="metric-label">Broj R-pikova:</span>
                            <span class="metric-value">${data.arrhythmia_detection?.r_peaks_count || 'N/A'}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">RR intervali:</span>
                            <span class="metric-value">${data.arrhythmia_detection?.heart_rate?.rr_count || 'N/A'}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Metod detekcije:</span>
                            <span class="metric-value">${data.arrhythmia_detection?.detection_method || 'signal_analysis'}</span>
                        </div>
                    </div>

                    <!-- MIT-BIH Annotations ako postoje -->
                    ${data.annotations ? `
                    <div style="background: #e8f5e8; padding: 15px; border-radius: 8px;">
                        <h4 style="margin: 0 0 10px 0; color: #27ae60;">
                            <i class="fas fa-hospital"></i> MIT-BIH Annotations (.atr fajl):
                        </h4>
                        <div class="metric">
                            <span class="metric-label">Anotirani R-pikovi:</span>
                            <span class="metric-value">${data.annotations.r_peaks_count || 'N/A'}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Ukupno anotacija:</span>
                            <span class="metric-value">${data.annotations.total_annotations || 'N/A'}</span>
                        </div>
                        <div class="metric">
                            <span class="metric-label">Aritmije u .atr:</span>
                            <span class="metric-value">${data.annotations.arrhythmias_count || 'N/A'}</span>
                        </div>
                    </div>
                    
                    <!-- Objašnjenje razlike u brojevima -->
                    <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin-top: 15px; border-left: 4px solid #ff9800;">
                        <h4 style="margin: 0 0 10px 0; color: #f57c00;">
                            <i class="fas fa-info-circle"></i> Objašnjenje razlike u brojevima:
                        </h4>
                        <div style="font-size: 0.9rem; line-height: 1.5;">
                            <strong>📋 Anotirani R-pikovi (${data.annotations.r_peaks_count || 'N/A'}):</strong> 
                            Ručno označeni od MIT-BIH eksperata u analiziranom segmentu<br>
                            
                            <strong>🔍 Detektovani R-pikovi (${data.arrhythmia_detection?.r_peaks_count || 'N/A'}):</strong> 
                            Automatski pronađeni našim algoritmom<br><br>
                            
                            <strong>💡 Razlog razlike:</strong> Algoritam može propustiti slabije R-pikove ili imati konzervativnije kriterijume detekcije. MIT-BIH anotacije predstavljaju "zlatni standard" za poređenje.
                        </div>
                    </div>
                    ` : ''}
                </div>
            </div>

            <!-- 4. HRV (Heart Rate Variability) -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-area result-icon" style="color: #f39c12;"></i>
                    <h3 class="result-title">4. Varijabilnost Srčanog Ritma (HRV)</h3>
                </div>
                <div class="result-content">
                    <div class="metric">
                        <span class="metric-label">HRV (standardna devijacija):</span>
                        <span class="metric-value">${data.arrhythmia_detection?.heart_rate?.heart_rate_variability?.toFixed(1) || 'N/A'} ms</span>
                    </div>
                    <div style="font-size: 0.9rem; color: #666; margin-top: 10px;">
                        <strong>Interpretacija:</strong> 
                        ${this.getHRVInterpretation(data.arrhythmia_detection?.heart_rate?.heart_rate_variability)}
                    </div>
                </div>
            </div>

            <!-- 5. ARITMIJE -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-exclamation-triangle result-icon" style="color: #e74c3c;"></i>
                    <h3 class="result-title">5. Detekcija Aritmija</h3>
                </div>
                <div class="result-content">
                    <div style="margin-bottom: 15px;">
                        <strong>Osnova za analizu:</strong> ${data.arrhythmia_detection?.arrhythmias?.detected?.length > 0 ? 'RR intervali iz detektovanih R-pikova' : 'Normalan ritam'}
                    </div>
                    <div id="arrhythmiasList">
                        ${this.formatArrhythmiasList(data.arrhythmia_detection?.arrhythmias)}
                    </div>
                </div>
            </div>

            <!-- 6. FFT ANALIZA -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-wave-square result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">6. FFT Frekvencijska Analiza</h3>
                </div>
                <div class="result-content">
                    <div class="metric">
                        <span class="metric-label">Dominantna frekvencija:</span>
                        <span class="metric-value">${data.fft_analysis?.peak_frequency_hz?.toFixed(2) || 'N/A'} Hz</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Peak amplituda:</span>
                        <span class="metric-value">${data.fft_analysis?.peak_amplitude?.toFixed(4) || 'N/A'}</span>
                    </div>
                    ${data.fft_analysis?.dc_removed ? `
                    <div class="metric">
                        <span class="metric-label">DC komponenta uklonjena:</span>
                        <span class="metric-value">✅ Da (${data.fft_analysis.dc_component?.toFixed(4) || 'N/A'})</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Analizirani opseg:</span>
                        <span class="metric-value">${data.fft_analysis.physiological_range_analyzed || 'N/A'}</span>
                    </div>
                    ` : ''}
                    <div style="font-size: 0.9rem; color: #666; margin-top: 10px;">
                        <strong>Interpretacija:</strong> 
                        ${this.getFFTInterpretation(data.fft_analysis?.peak_frequency_hz)}
                    </div>
                </div>
            </div>

            <!-- 7. KVALITET SIGNALA -->
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-signal result-icon" style="color: #27ae60;"></i>
                    <h3 class="result-title">7. Kvalitet Signala</h3>
                </div>
                <div class="result-content">
                    <div class="metric">
                        <span class="metric-label">Ocena kvaliteta:</span>
                        <span class="metric-value">${data.arrhythmia_detection?.signal_quality?.quality || 'N/A'}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Signal-to-Noise Ratio:</span>
                        <span class="metric-value">${data.arrhythmia_detection?.signal_quality?.snr_db?.toFixed(1) || 'N/A'} dB</span>
                    </div>
                </div>
            </div>

            <!-- Action Buttons Container -->
            <div class="action-buttons" style="margin-top: 20px;">
                <button id="newAnalysisBtn" class="btn btn-secondary">
                    <i class="fas fa-plus"></i>
                    Nova Analiza
                </button>
                <button id="shareBtn" class="btn btn-secondary" onclick="shareResults()">
                    <i class="fas fa-share-alt"></i>
                    Podeli Rezultate
                </button>
            </div>
        `;

        resultsSection.innerHTML = structuredHTML;
    }

    // Helper functions for interpretations
    getHRVInterpretation(hrv) {
        if (!hrv) return 'Podaci nisu dostupni';
        if (hrv < 20) return 'Niska varijabilnost (može ukazivati na stres)';
        if (hrv < 50) return 'Normalna varijabilnost';
        return 'Visoka varijabilnost (dobra autonomna regulacija)';
    }

    getFFTInterpretation(freq) {
        if (!freq) return 'Podaci nisu dostupni';
        if (freq < 0.5) return 'Vrlo niska frekvencija - mogući problem sa analizom';
        if (freq >= 0.8 && freq <= 2.0) return 'Normalna srčana frekvencija (48-120 bpm)';
        if (freq > 2.0 && freq <= 3.0) return 'Povišena frekvencija (120-180 bpm)';
        return `Frekvencija van normalnog opsega (${(freq * 60).toFixed(0)} bpm ekvivalent)`;
    }

    formatArrhythmiasList(arrhythmias) {
        if (!arrhythmias || !arrhythmias.detected || arrhythmias.detected.length === 0) {
            return '<div class="arrhythmia-item severity-low">✅ Nema detektovanih aritmija</div>';
        }

        return arrhythmias.detected.map(arr => `
            <div class="arrhythmia-item severity-${arr.severity}">
                <div class="arrhythmia-type">⚠️ ${arr.type}</div>
                <div class="arrhythmia-desc">${arr.description}</div>
                <div class="arrhythmia-desc"><strong>Vrednost:</strong> ${arr.value}</div>
            </div>
        `).join('');
    }
    // NOVO: Napredni kardiološki prikaz rezultata
    populateAdvancedCardiologyResults(data) {
        const resultsSection = document.getElementById('resultsSection');
        const cardiology = data.advanced_cardiology;
        
        // Keep the header, but replace the content
        const existingHeader = resultsSection.querySelector('.raw-signal-header, .wfdb-header');
        const headerHTML = existingHeader ? existingHeader.outerHTML : '';
        
        // Overall health status
        const overallAssessment = cardiology.arrhythmia_analysis?.overall_assessment || 'Analiza završena';
        let statusClass = 'status-normal';
        if (overallAssessment.includes('hitna medicinska')) statusClass = 'status-danger';
        else if (overallAssessment.includes('konsultacija') || overallAssessment.includes('konsultacija')) statusClass = 'status-warning';

        const advancedHTML = `
            ${headerHTML}
            
            <!-- Overall Health Status -->
            <div id="healthStatus" class="health-status ${statusClass}">
                ${overallAssessment}
            </div>

            <!-- 📁 OPŠTE INFORMACIJE -->
            ${this.renderGeneralInfo(cardiology.general_info)}
            
            <!-- 📍 ANOTACIJE (.atr fajl) -->
            ${cardiology.annotation_analysis ? this.renderAnnotationAnalysis(cardiology.annotation_analysis) : ''}
            
            <!-- 📈 DETEKCIJA R-PIKOVA -->
            ${this.renderRPeakAnalysis(cardiology.r_peak_analysis)}
            
            <!-- 🫀 SRČANI RITAM -->
            ${this.renderHeartRateAnalysis(cardiology.heart_rate_analysis)}
            
            <!-- 📉 HRV ANALIZA -->
            ${this.renderHRVAnalysis(cardiology.hrv_analysis)}
            
            <!-- ⚠️ ARITMIJE -->
            ${this.renderArrhythmiaAnalysis(cardiology.arrhythmia_analysis)}
            
            <!-- 📶 KVALITET SIGNALA -->
            ${this.renderSignalQuality(cardiology.signal_quality)}
            
            <!-- 🔬 FREKVENCIJSKA ANALIZA -->
            ${this.renderFrequencyAnalysis(cardiology.frequency_analysis)}
            
            <!-- 📊 VIZUELIZACIJE -->
            ${this.renderVisualizations(cardiology.visualizations)}
            
            <!-- Action Buttons -->
            <div class="action-buttons" style="margin-top: 20px;">
                <button id="newAnalysisBtn" class="btn btn-secondary">
                    <i class="fas fa-plus"></i> Nova Analiza
                </button>
                <button onclick="window.print()" class="btn btn-secondary">
                    <i class="fas fa-print"></i> Štampaj Izveštaj
                </button>
            </div>
        `;

        resultsSection.innerHTML = advancedHTML;
    }

    // Render funkcije za napredni prikaz
    renderGeneralInfo(info) {
        if (!info) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-info-circle result-icon" style="color: #3498db;"></i>
                <h3 class="result-title">📁 Opšte Informacije o Signalu</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">Analizirani uzorci:</span>
                    <span class="metric-value">${info.analyzed_samples?.toLocaleString() || 'N/A'}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Trajanje analize:</span>
                    <span class="metric-value">${info.analyzed_duration_minutes?.toFixed(1) || 'N/A'} min (${info.analyzed_duration_seconds?.toFixed(1) || 'N/A'}s)</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Frekvencija uzorkovanja:</span>
                    <span class="metric-value">${info.sampling_frequency || 'N/A'} Hz</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Korišćeni kanali:</span>
                    <span class="metric-value">${info.channels_used || 'N/A'}</span>
                </div>
                ${info.total_original_samples ? `
                <div class="metric">
                    <span class="metric-label">Originalni zapis (ukupno):</span>
                    <span class="metric-value">${info.total_original_samples.toLocaleString()} uzoraka (${info.total_original_duration_minutes?.toFixed(1)} min)</span>
                </div>
                <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin-top: 10px;">
                    <strong>📝 Segmentacija:</strong> Analiziran je segment od ${info.segment_percentage?.toFixed(1)}% ukupnog zapisa zbog performansi.
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    renderAnnotationAnalysis(annotation) {
        if (!annotation) return '';
        
        const typesList = Object.entries(annotation.annotation_types || {})
            .map(([type, count]) => `<span class="annotation-type">${type}: ${count}</span>`)
            .join(' ');
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-hospital result-icon" style="color: #e74c3c;"></i>
                <h3 class="result-title">📍 MIT-BIH Anotacije (.atr fajl)</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">Ukupno anotacija:</span>
                    <span class="metric-value">${annotation.total_annotations || 0}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">R-peak anotacije:</span>
                    <span class="metric-value">${annotation.r_peak_annotations || 0}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Aritmijske anotacije:</span>
                    <span class="metric-value">${annotation.arrhythmia_annotations || 0}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Izvor:</span>
                    <span class="metric-value">${annotation.source_file || 'N/A'}</span>
                </div>
                <div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <strong>📋 Tipovi anotacija:</strong><br>
                    ${typesList || 'Nema podataka'}
                </div>
            </div>
        </div>`;
    }

    renderRPeakAnalysis(rpeak) {
        if (!rpeak) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-chart-line result-icon" style="color: #9b59b6;"></i>
                <h3 class="result-title">📈 Analiza R-pikova</h3>
            </div>
            <div class="result-content">
                <div style="background: #f8f9ff; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                    <h4 style="margin: 0 0 10px 0;">🔍 Detektovani algoritmom:</h4>
                    <div class="metric">
                        <span class="metric-label">Broj R-pikova:</span>
                        <span class="metric-value">${rpeak.detected_count || 'N/A'}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Metod detekcije:</span>
                        <span class="metric-value">${rpeak.detection_method || 'N/A'}</span>
                    </div>
                </div>
                
                ${rpeak.annotated_count ? `
                <div style="background: #e8f5e8; padding: 15px; border-radius: 8px;">
                    <h4 style="margin: 0 0 10px 0;">🏥 MIT-BIH annotations:</h4>
                    <div class="metric">
                        <span class="metric-label">Anotirani R-pikovi:</span>
                        <span class="metric-value">${rpeak.annotated_count}</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Poklapanje:</span>
                        <span class="metric-value">${rpeak.matched_peaks || 0} (${rpeak.detection_accuracy_percent?.toFixed(1) || 0}%)</span>
                    </div>
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    renderHeartRateAnalysis(hr) {
        if (!hr || hr.error) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-heartbeat result-icon" style="color: #e74c3c;"></i>
                <h3 class="result-title">🫀 Srčani Ritam</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">Prosečna frekvencija:</span>
                    <span class="metric-value">${hr.average_bpm?.toFixed(1) || 'N/A'} bpm</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Ukupno otkucaja:</span>
                    <span class="metric-value">${hr.total_beats || 'N/A'}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Prosečan RR interval:</span>
                    <span class="metric-value">${hr.avg_rr_ms?.toFixed(1) || 'N/A'} ms</span>
                </div>
            </div>
        </div>`;
    }

    renderHRVAnalysis(hrv) {
        if (!hrv || hrv.error) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-chart-area result-icon" style="color: #f39c12;"></i>
                <h3 class="result-title">📉 HRV (Heart Rate Variability)</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">SDRR:</span>
                    <span class="metric-value">${hrv.sdrr_ms?.toFixed(1) || 'N/A'} ms</span>
                </div>
                <div class="metric">
                    <span class="metric-label">RMSSD:</span>
                    <span class="metric-value">${hrv.rmssd_ms?.toFixed(1) || 'N/A'} ms</span>
                </div>
                <div class="metric">
                    <span class="metric-label">pNN50:</span>
                    <span class="metric-value">${hrv.pnn50_percent?.toFixed(1) || 'N/A'}%</span>
                </div>
                
                ${hrv.overall_hrv_assessment ? `
                <div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <strong>🏥 Procena:</strong> ${hrv.overall_hrv_assessment}
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    renderArrhythmiaAnalysis(arr) {
        if (!arr) return '';
        
        const arrhythmiasList = arr.detected && arr.detected.length > 0 ? 
            arr.detected.map(arrhythmia => `
                <div class="arrhythmia-item severity-${arrhythmia.severity}">
                    <div class="arrhythmia-type">⚠️ ${arrhythmia.type}</div>
                    <div class="arrhythmia-desc">${arrhythmia.description}</div>
                    <div class="arrhythmia-desc"><strong>Vrednost:</strong> ${arrhythmia.value}</div>
                    ${arrhythmia.criteria ? `<div class="arrhythmia-desc"><em>Kriterijum:</em> ${arrhythmia.criteria}</div>` : ''}
                </div>
            `).join('') :
            '<div class="arrhythmia-item severity-low">✅ Nema detektovanih aritmija</div>';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-exclamation-triangle result-icon" style="color: #e74c3c;"></i>
                <h3 class="result-title">⚠️ Detekcija Aritmija</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">Ukupno detektovano:</span>
                    <span class="metric-value">${arr.total_count || 0}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Osnova analize:</span>
                    <span class="metric-value">${arr.analysis_basis || 'RR intervali'}</span>
                </div>
                
                <div style="margin: 15px 0;">
                    ${arrhythmiasList}
                </div>
                
                ${arr.missed_beats_analysis ? `
                <div style="background: #fff3e0; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <strong>📊 Propušteni otkucaji:</strong> ${arr.missed_beats_analysis.detected_long_intervals} dugih intervala 
                    (${arr.missed_beats_analysis.percentage_of_intervals?.toFixed(1)}%)
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    renderSignalQuality(quality) {
        if (!quality) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-signal result-icon" style="color: #27ae60;"></i>
                <h3 class="result-title">📶 Kvalitet Signala</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">SNR:</span>
                    <span class="metric-value">${quality.snr_db?.toFixed(1) || 'N/A'} dB</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Procena kvaliteta:</span>
                    <span class="metric-value">${quality.quality_assessment || 'N/A'}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Nivo šuma:</span>
                    <span class="metric-value">${quality.noise_level || 'N/A'}</span>
                </div>
                ${quality.artifacts_detected !== undefined ? `
                <div class="metric">
                    <span class="metric-label">Artefakti:</span>
                    <span class="metric-value">${quality.artifacts_detected} detektovano</span>
                </div>
                ` : ''}
                
                ${quality.filters_applied ? `
                <div style="background: #f0f8ff; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <strong>🔧 Primenjeni filtri:</strong><br>
                    ${quality.filters_applied.map(filter => `• ${filter}`).join('<br>')}
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    renderFrequencyAnalysis(freq) {
        if (!freq) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-wave-square result-icon" style="color: #3498db;"></i>
                <h3 class="result-title">🔬 Frekvencijska Analiza</h3>
            </div>
            <div class="result-content">
                <div class="metric">
                    <span class="metric-label">Dominantna frekvencija:</span>
                    <span class="metric-value">${freq.peak_frequency_hz?.toFixed(2) || 'N/A'} Hz</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Peak amplituda:</span>
                    <span class="metric-value">${freq.peak_amplitude?.toFixed(4) || 'N/A'}</span>
                </div>
                <div class="metric">
                    <span class="metric-label">DC komponenta:</span>
                    <span class="metric-value">${freq.dc_component_removed ? '✅ Uklonjena' : '❌ Prisutna'}</span>
                </div>
                
                ${freq.frequency_interpretation ? `
                <div style="background: #e8f5e8; padding: 10px; border-radius: 5px; margin-top: 10px;">
                    <strong>💡 Interpretacija:</strong> ${freq.frequency_interpretation}
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    renderVisualizations(viz) {
        if (!viz) return '';
        
        return `
        <div class="result-card">
            <div class="result-header">
                <i class="fas fa-chart-bar result-icon" style="color: #9b59b6;"></i>
                <h3 class="result-title">📊 Vizuelizacije</h3>
            </div>
            <div class="result-content">
                ${viz.signal_with_peaks ? `
                <div style="margin: 15px 0;">
                    <h4>EKG Signal sa R-pikovima:</h4>
                    <img src="data:image/png;base64,${viz.signal_with_peaks}" style="max-width: 100%; border: 1px solid #ddd; border-radius: 5px;">
                </div>
                ` : ''}
                
                ${viz.rr_histogram ? `
                <div style="margin: 15px 0;">
                    <h4>Histogram RR Intervala:</h4>
                    <img src="data:image/png;base64,${viz.rr_histogram}" style="max-width: 100%; border: 1px solid #ddd; border-radius: 5px;">
                </div>
                ` : ''}
                
                ${viz.heart_rate_trend ? `
                <div style="margin: 15px 0;">
                    <h4>Srčana Frekvencija Kroz Vreme:</h4>
                    <img src="data:image/png;base64,${viz.heart_rate_trend}" style="max-width: 100%; border: 1px solid #ddd; border-radius: 5px;">
                </div>
                ` : ''}
                
                ${viz.poincare_plot ? `
                <div style="margin: 15px 0;">
                    <h4>Poincaré Dijagram HRV:</h4>
                    <img src="data:image/png;base64,${viz.poincare_plot}" style="max-width: 100%; border: 1px solid #ddd; border-radius: 5px;">
                </div>
                ` : ''}
            </div>
        </div>`;
    }

    // NOVO: Dodaj vizuelizacije za master rad
    addThesisVisualizations(visualizations) {
        console.log('🎯 v3.1 Starting addThesisVisualizations - FIXED for broken pipe');
        console.log('📊 v3.1 Received data:', visualizations);
        console.log('📊 v3.1 Data type:', typeof visualizations);
        
        const resultsSection = document.getElementById('resultsSection');
        
        // Kreiraj sekciju za vizuelizacije ako ne postoji
        let vizSection = document.getElementById('thesisVisualizationsSection');
        if (!vizSection) {
            vizSection = document.createElement('div');
            vizSection.id = 'thesisVisualizationsSection';
            vizSection.className = 'main-card';
            vizSection.style.marginTop = '20px';
            resultsSection.parentNode.insertBefore(vizSection, resultsSection.nextSibling);
        }

        let visualizationsHTML = `
            <h2><i class="fas fa-chart-line"></i> Vizuelizacije za Master Rad</h2>
            <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <strong>📊 Furijeova i Z-transformacija u analizi biomedicinskih signala</strong><br>
                Grafici spremni za uključivanje u poglavlje 5 master rada.
            </div>
        `;

        // Check for new format first (v3.1)
        if (visualizations.visualizations && typeof visualizations.visualizations === 'object') {
            console.log('📊 v3.1 Using NEW FORMAT');
            const vizData = visualizations.visualizations;
            
            // DEBUG: Prikaži sve ključeve
            console.log('📊 v3.1 Available visualization keys:', Object.keys(vizData));
            for (let key of Object.keys(vizData)) {
                const viz = vizData[key];
                const hasImage = !!viz.image_base64;
                const imageLen = viz.image_base64 ? viz.image_base64.length : 0;
                console.log(`📊 v3.1 Key "${key}": title="${viz.title}" hasImage=${hasImage} imageLength=${imageLen}`);
            }
            
            // Iterate through numbered visualizations
            for (let i = 1; i <= 4; i++) {
                if (vizData[i.toString()]) {
                    console.log(`📊 v3.1 Adding visualization ${i}:`, vizData[i.toString()].title);
                    const viz = vizData[i.toString()];
                    
                    let imageContent = '';
                    if (viz.image_base64) {
                        imageContent = `<img src="data:image/png;base64,${viz.image_base64}" 
                                             style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px; margin: 10px 0;"
                                             alt="Visualization ${i}">`;
                    } else {
                        imageContent = `<div style="background: #f8f9fa; border: 2px dashed #dee2e6; border-radius: 8px; padding: 40px; text-align: center; margin: 10px 0; color: #6c757d;">
                                           <i class="fas fa-image" style="font-size: 2rem; margin-bottom: 10px;"></i><br>
                                           Slika se generiše...
                                       </div>`;
                    }
                    
                    visualizationsHTML += `
                        <div class="result-card">
                            <div class="result-header">
                                <i class="fas fa-chart-line result-icon" style="color: #3498db;"></i>
                                <h3 class="result-title">${viz.title}</h3>
                            </div>
                            <div class="result-content">
                                <p><strong>Opis:</strong> ${viz.description}</p>
                                ${imageContent}
                                <p style="font-size: 0.9rem; color: #666;"><em>${viz.caption}</em></p>
                            </div>
                        </div>
                    `;
                }
            }
        }
        // OLD FORMAT FALLBACK
        else {
            console.log('📊 v2.9 Using OLD FORMAT (fallback)');
        
        // 1. EKG Signal sa R-pikovima
        if (visualizations.ekg_with_peaks) {
            visualizationsHTML += `
                <div class="result-card">
                    <div class="result-header">
                        <i class="fas fa-heartbeat result-icon" style="color: #e74c3c;"></i>
                        <h3 class="result-title">1. EKG Signal sa Detektovanim R-pikovima</h3>
                    </div>
                    <div class="result-content">
                        <p><strong>Opis:</strong> Prikaz originalnog EKG signala sa algoritmski detektovanim R-pikovima (crvene tačke) i MIT-BIH ekspert anotacijama (zeleni trouglovi).</p>
                        <img src="data:image/png;base64,${visualizations.ekg_with_peaks}" 
                             style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px; margin: 10px 0;"
                             alt="EKG signal sa R-pikovima">
                        <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.1: EKG signal sa detektovanim R-pikovima i poređenjem sa MIT-BIH anotacijama</em></p>
                    </div>
                </div>
            `;
        }

        // 2. FFT Spektar
        if (visualizations.fft_spectrum) {
            visualizationsHTML += `
                <div class="result-card">
                    <div class="result-header">
                        <i class="fas fa-wave-square result-icon" style="color: #3498db;"></i>
                        <h3 class="result-title">2. FFT Spektar (Furijeova Transformacija)</h3>
                    </div>
                    <div class="result-content">
                        <p><strong>Opis:</strong> Frekvencijski spektar EKG signala dobijen Furijeovom transformacijom. Dominantna frekvencija označena crvenom linijom odgovara srčanoj frekvenciji.</p>
                        <img src="data:image/png;base64,${visualizations.fft_spectrum}" 
                             style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px; margin: 10px 0;"
                             alt="FFT spektar">
                        <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.2: FFT spektar EKG signala sa označenom dominantnom frekvencijom</em></p>
                    </div>
                </div>
            `;
        }

        // 3. Poređenje sa MIT-BIH
        if (visualizations.mitbih_comparison) {
            visualizationsHTML += `
                <div class="result-card">
                    <div class="result-header">
                        <i class="fas fa-balance-scale result-icon" style="color: #9b59b6;"></i>
                        <h3 class="result-title">3. Poređenje sa MIT-BIH Anotacijama</h3>
                    </div>
                    <div class="result-content">
                        <p><strong>Opis:</strong> Statistička analiza performansi algoritma u odnosu na MIT-BIH ekspert anotacije. Prikazane su greške (false positives/negatives) i metrike precision/recall.</p>
                        <img src="data:image/png;base64,${visualizations.mitbih_comparison}" 
                             style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px; margin: 10px 0;"
                             alt="MIT-BIH poređenje">
                        <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.3: Validacija algoritma kroz poređenje sa MIT-BIH golden standard anotacijama</em></p>
                    </div>
                </div>
            `;
        }

        // 4. Signal Processing Pipeline
        if (visualizations.processing_steps) {
            visualizationsHTML += `
                <div class="result-card">
                    <div class="result-header">
                        <i class="fas fa-cogs result-icon" style="color: #f39c12;"></i>
                        <h3 class="result-title">4. Signal Processing Pipeline (Z-transformacija)</h3>
                    </div>
                    <div class="result-content">
                        <p><strong>Opis:</strong> Koraci obrade signala korišćenjem Z-transformacije: originalni signal, bandpass filtriranje (0.5-40 Hz), baseline removal i filter response u Z-domenu.</p>
                        <img src="data:image/png;base64,${visualizations.processing_steps}" 
                             style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px; margin: 10px 0;"
                             alt="Signal processing pipeline">
                        <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.4: Pipeline obrade biomedicinskog signala korišćenjem Z-transformacije</em></p>
                    </div>
                </div>
            `;
        }
        } // End of old format

        // Dugme za export
        visualizationsHTML += `
            <div class="action-buttons" style="margin-top: 20px; text-align: center;">
                <button onclick="generatePDFReport()" class="btn btn-primary" style="margin: 5px;">
                    <i class="fas fa-file-pdf"></i> Generate Report
                </button>
                <button onclick="window.print()" class="btn btn-secondary" style="margin: 5px;">
                    <i class="fas fa-print"></i> Štampaj Vizuelizacije
                </button>
            </div>
        `;

        vizSection.innerHTML = visualizationsHTML;
        vizSection.style.display = 'block';
        console.log('📊 Thesis visualizations added to page');
    }

    // NOVO v3.1: Asinhrono generisanje vizuelizacija
    async generateVisualizationsAsync(analysisData) {
        console.log('🚀 v3.1 Starting async visualization generation');
        
        // Prvo prikaži placeholder sekciju
        this.showVisualizationPlaceholders();
        
        // Generiši svaku vizuelizaciju asinhrono
        const visualizations = ['1', '2', '3', '4'];
        const promises = visualizations.map(id => this.generateSingleVisualization(id, analysisData));
        
        // Čekaj sve vizuelizacije
        const results = await Promise.allSettled(promises);
        
        // Obradi rezultate
        results.forEach((result, index) => {
            const vizId = visualizations[index];
            if (result.status === 'fulfilled' && result.value) {
                this.updateVisualizationContent(vizId, result.value);
            } else {
                this.updateVisualizationError(vizId, result.reason);
            }
        });
        
        console.log('✅ v3.1 All visualizations completed');
    }

    showVisualizationPlaceholders() {
        const resultsSection = document.getElementById('resultsSection');
        let vizSection = document.getElementById('thesisVisualizationsSection');
        
        if (!vizSection) {
            vizSection = document.createElement('div');
            vizSection.id = 'thesisVisualizationsSection';
            vizSection.className = 'main-card';
            vizSection.style.marginTop = '20px';
            resultsSection.parentNode.insertBefore(vizSection, resultsSection.nextSibling);
        }

        vizSection.innerHTML = `
            <h2><i class="fas fa-chart-line"></i> Vizuelizacije za Master Rad <span style="font-size: 0.4em; color: #666;">(v3.1)</span></h2>
            <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <strong>📊 Furijeova i Z-transformacija u analizi biomedicinskih signala</strong><br>
                Generišu se grafici za uključivanje u poglavlje 5 master rada...
            </div>
            
            <div id="viz-1" class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-line result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">1. EKG Signal sa Detektovanim R-pikovima</h3>
                </div>
                <div class="result-content">
                    <p><strong>Opis:</strong> Vremenski domen EKG signala sa automatski detektovanim R-pikovima označenim crvenim krugovima.</p>
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #3498db;"></i><br>
                        Generiše se slika 1...
                    </div>
                    <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.1: EKG signal u vremenskom domenu sa detektovanim R-pikovima</em></p>
                </div>
            </div>
            
            <div id="viz-2" class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-line result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">2. FFT Spektar (Furijeova Transformacija)</h3>
                </div>
                <div class="result-content">
                    <p><strong>Opis:</strong> Frekvencijski spektar EKG signala dobijen Furijeovom transformacijom.</p>
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #3498db;"></i><br>
                        Generiše se slika 2...
                    </div>
                    <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.2: FFT spektar EKG signala sa označenom dominantnom frekvencijom</em></p>
                </div>
            </div>
            
            <div id="viz-3" class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-line result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">3. Poređenje sa MIT-BIH Anotacijama</h3>
                </div>
                <div class="result-content">
                    <p><strong>Opis:</strong> Poređenje automatski detektovanih R-pikova sa ekspertskim MIT-BIH anotacijama.</p>
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #3498db;"></i><br>
                        Generiše se slika 3...
                    </div>
                    <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.3: Validacija algoritma protiv MIT-BIH ekspertskih anotacija</em></p>
                </div>
            </div>
            
            <div id="viz-4" class="result-card">
                <div class="result-header">
                    <i class="fas fa-chart-line result-icon" style="color: #3498db;"></i>
                    <h3 class="result-title">4. Signal Processing Pipeline (Z-transformacija)</h3>
                </div>
                <div class="result-content">
                    <p><strong>Opis:</strong> Koraci obrade signala korišćenjem Z-transformacije.</p>
                    <div class="loading-placeholder">
                        <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #3498db;"></i><br>
                        Generiše se slika 4...
                    </div>
                    <p style="font-size: 0.9rem; color: #666;"><em>Slika 5.4: Pipeline obrade biomedicinskog signala korišćenjem Z-transformacije</em></p>
                </div>
            </div>
        `;
        
        vizSection.style.display = 'block';
    }

    async generateSingleVisualization(vizId, analysisData) {
        try {
            console.log(`🎨 v3.1 Generating visualization ${vizId}`);
            
            const response = await fetch(`/api/visualizations/thesis/visualization/${vizId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    signal: analysisData.extracted_signal || [],
                    fs: analysisData.signal_info?.sampling_frequency || 250,
                    analysis_results: analysisData
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success) {
                console.log(`✅ v3.1 Visualization ${vizId} completed`);
                return result;
            } else {
                throw new Error(result.error || 'Unknown error');
            }
            
        } catch (error) {
            console.error(`❌ v3.1 Visualization ${vizId} failed:`, error);
            throw error;
        }
    }

    updateVisualizationContent(vizId, vizData) {
        const placeholder = document.querySelector(`#viz-${vizId} .loading-placeholder`);
        if (placeholder && vizData.image_base64) {
            placeholder.innerHTML = `
                <img src="data:image/png;base64,${vizData.image_base64}" 
                     style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px; margin: 10px 0;"
                     alt="Visualization ${vizId}">
            `;
        }
    }

    updateVisualizationError(vizId, error) {
        const placeholder = document.querySelector(`#viz-${vizId} .loading-placeholder`);
        if (placeholder) {
            placeholder.innerHTML = `
                <div style="background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; padding: 20px; text-align: center; color: #721c24;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 1.5rem; margin-bottom: 10px;"></i><br>
                    Greška pri generisanju slike ${vizId}: ${error}
                </div>
            `;
        }
    }

    createFullReportHTML() {
        console.log('Creating full report HTML...', this.analysisData);
        if (!this.analysisData) {
            console.warn('No analysis data available for report');
            return `
            <div style="max-width: 800px; margin: 0 auto; font-family: Arial, sans-serif; padding: 20px;">
                <h1 style="text-align: center; color: #c0392b;">No Analysis Data Available</h1>
                <p style="text-align: center;">Please run an EKG analysis first before generating the report.</p>
            </div>`;
        }
        
        const data = this.analysisData;
        const timestamp = new Date().toLocaleString();
        
        return `
        <div style="max-width: 800px; margin: 0 auto; font-family: 'Times New Roman', serif; line-height: 1.6; color: #333;">
            <header style="text-align: center; margin-bottom: 40px; border-bottom: 2px solid #2c3e50; padding-bottom: 20px;">
                <h1 style="color: #2c3e50; margin-bottom: 10px; font-size: 24px;">EKG Signal Analysis Report</h1>
                <p style="color: #7f8c8d; font-size: 14px;">Generated: ${timestamp}</p>
                <p style="color: #7f8c8d; font-size: 12px; font-style: italic;">
                    Master Thesis: "Primena Furijeove i Z-transformacije u analizi biomedicinskih signala"
                </p>
            </header>
            
            ${this.generateSignalInfoSection(data)}
            ${this.generateHeartRateSection(data)}
            ${this.generateFFTSection(data)}
            ${this.generateZTransformSection(data)}
            ${this.generateArrhythmiaSection(data)}
            ${this.generateVisualizationsSection()}
            
            <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 12px; color: #777; text-align: center;">
                Generated by EKG Analysis Application - Master Thesis Implementation<br>
                University of Belgrade, Faculty of Electrical Engineering
            </footer>
        </div>`;
    }
    
    generateSignalInfoSection(data) {
        const si = data.signal_info;
        if (!si) return '';
        
        return `
        <section style="margin-bottom: 30px;">
            <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">1. Signal Information</h2>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div><strong>Duration:</strong> ${si.duration_seconds?.toFixed(2) || 'N/A'} seconds</div>
                    <div><strong>Sampling Frequency:</strong> ${si.sampling_frequency || 'N/A'} Hz</div>
                    <div><strong>Signal Length:</strong> ${si.length?.toLocaleString() || 'N/A'} samples</div>
                    <div><strong>Source:</strong> ${si.source || 'image_analysis'}</div>
                </div>
            </div>
        </section>`;
    }
    
    generateHeartRateSection(data) {
        const hr = data.arrhythmia_detection;
        if (!hr) return '';
        
        return `
        <section style="margin-bottom: 30px;">
            <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">2. Heart Rate Analysis</h2>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div><strong>Heart Rate:</strong> ${hr.heart_rate_bpm?.toFixed(1) || 'N/A'} BPM</div>
                    <div><strong>R-Peaks Detected:</strong> ${hr.r_peaks_count || 'N/A'}</div>
                    <div><strong>RR Interval Mean:</strong> ${hr.rr_statistics?.mean?.toFixed(0) || 'N/A'} ms</div>
                    <div><strong>Heart Rate Variability:</strong> ${hr.hrv_analysis?.rmssd?.toFixed(1) || 'N/A'} ms</div>
                </div>
                ${hr.signal_quality ? `
                <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #e9ecef;">
                    <strong>Signal Quality:</strong> ${hr.signal_quality.quality_category || 'N/A'} 
                    (SNR: ${hr.signal_quality.snr_db?.toFixed(1) || 'N/A'} dB)
                </div>` : ''}
            </div>
        </section>`;
    }
    
    generateFFTSection(data) {
        const fft = data.fft_analysis;
        if (!fft) return '';
        
        return `
        <section style="margin-bottom: 30px;">
            <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">3. Frequency Analysis (FFT)</h2>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div><strong>Dominant Frequency:</strong> ${fft.peak_frequency?.toFixed(2) || 'N/A'} Hz</div>
                    <div><strong>Peak Amplitude:</strong> ${fft.peak_amplitude?.toFixed(4) || 'N/A'}</div>
                    <div><strong>Signal Quality (SNR):</strong> ${fft.signal_quality?.snr_db?.toFixed(1) || 'N/A'} dB</div>
                    <div><strong>Quality Category:</strong> ${fft.signal_quality?.quality_category || 'N/A'}</div>
                </div>
            </div>
        </section>`;
    }
    
    generateZTransformSection(data) {
        const zt = data.z_transform;
        if (!zt) return '';
        
        return `
        <section style="margin-bottom: 30px;">
            <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">4. Z-Transform Analysis</h2>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                    <div><strong>System Poles:</strong> ${zt.poles?.length || 'N/A'}</div>
                    <div><strong>System Zeros:</strong> ${zt.zeros?.length || 'N/A'}</div>
                    <div><strong>System Stable:</strong> ${zt.stability?.is_stable ? 'Yes' : 'No'}</div>
                    <div><strong>Filter Type:</strong> ${zt.filter_analysis?.type || 'N/A'}</div>
                </div>
            </div>
        </section>`;
    }
    
    generateArrhythmiaSection(data) {
        const arr = data.arrhythmia_detection?.detected_arrhythmias;
        if (!arr) return '';
        
        return `
        <section style="margin-bottom: 30px;">
            <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">5. Arrhythmia Detection</h2>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0;">
                ${arr.length > 0 ? 
                    arr.map(arrhythmia => `
                        <div style="margin-bottom: 10px; padding: 10px; background: #fff3cd; border-left: 4px solid #ffc107; border-radius: 3px;">
                            <strong>${arrhythmia.type}:</strong> ${arrhythmia.description}
                        </div>
                    `).join('') :
                    '<div style="color: #28a745; font-weight: bold;">✅ No significant arrhythmias detected</div>'
                }
            </div>
        </section>`;
    }
    
    generateVisualizationsSection() {
        const visualizations = document.getElementById('visualizations');
        if (!visualizations || visualizations.style.display === 'none') return '';
        
        // Clone visualizations content and ensure images are properly sized for PDF
        let vizContent = visualizations.innerHTML;
        
        // Adjust image styles for PDF
        vizContent = vizContent.replace(/style="[^"]*"/g, (match) => {
            return match.replace(/max-width:\s*[^;]+;?/g, 'max-width: 100%; ')
                       .replace(/width:\s*[^;]+;?/g, 'width: 100%; ')
                       .replace(/height:\s*auto[^;]*;?/g, 'height: auto; ');
        });
        
        // Ensure all images have proper sizing
        vizContent = vizContent.replace(/<img/g, '<img style="max-width: 100%; height: auto; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;"');
        
        return `
        <section style="margin-bottom: 30px; page-break-inside: avoid;">
            <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">6. Generated Visualizations & Diagrams</h2>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0;">
                ${vizContent}
            </div>
        </section>`;
    }

    exportThesisReport() {
        // Generate report data
        const reportData = {
            timestamp: new Date().toLocaleString('sr'),
            signal_info: this.analysisData?.signal_info || {},
            analysis_results: {
                heart_rate: this.analysisData?.arrhythmia_detection?.heart_rate || {},
                arrhythmias: this.analysisData?.arrhythmia_detection?.arrhythmias || {},
                fft_analysis: this.analysisData?.fft_analysis || {},
                signal_quality: this.analysisData?.arrhythmia_detection?.signal_quality || {}
            }
        };

        // Create downloadable HTML report
        const reportHTML = this.generateHTMLReport(reportData);
        
        // Download as HTML file
        const blob = new Blob([reportHTML], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `EKG_Analiza_Master_Rad_${new Date().toISOString().slice(0,10)}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.showSuccess('📄 Report za master rad je preuzet!');
    }

    // Show additional analysis
    showAdditionalAnalysis() {
        console.log('🐛 DEBUG: Testing visualizations...');
        console.log('Analysis data:', this.analysisData);
        
        if (this.analysisData && this.analysisData.thesis_visualizations) {
            console.log('✅ thesis_visualizations postoje:', this.analysisData.thesis_visualizations);
            console.log('Keys:', Object.keys(this.analysisData.thesis_visualizations));
            
            if (this.analysisData.thesis_visualizations.error) {
                console.log('❌ Error u vizuelizacijama:', this.analysisData.thesis_visualizations.error);
                alert('Error: ' + this.analysisData.thesis_visualizations.error);
            } else {
                console.log('🎯 Pokušavam da dodam vizuelizacije...');
                this.addThesisVisualizations(this.analysisData.thesis_visualizations);
                alert('✅ Vizuelizacije dodane! Skroluj dole da ih vidiš.');
            }
        } else {
            console.log('❌ Nema thesis_visualizations u analysis data');
            alert('❌ Nema thesis_visualizations podataka. Backend možda ne generiše vizuelizacije.');
        }
    }

    generateHTMLReport(data) {
        return `
<!DOCTYPE html>
<html lang="sr">
<head>
    <meta charset="UTF-8">
    <title>EKG Analiza - Master Rad Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        h1, h2 { color: #2c3e50; }
        .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .metric { margin: 10px 0; }
        .metric-label { font-weight: bold; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>📊 EKG Analiza - Master Rad Report</h1>
    <p><strong>Tema:</strong> Primena Furijeove i Z-transformacije u analizi biomedicinskih signala</p>
    <p><strong>Datum analize:</strong> ${data.timestamp}</p>
    
    <div class="summary">
        <h2>Opšti Podaci Signala</h2>
        <div class="metric"><span class="metric-label">Broj uzoraka:</span> ${data.signal_info.length?.toLocaleString() || 'N/A'}</div>
        <div class="metric"><span class="metric-label">Trajanje:</span> ${data.signal_info.duration_seconds?.toFixed(1) || 'N/A'}s</div>
        <div class="metric"><span class="metric-label">Frekvencija uzorkovanja:</span> ${data.signal_info.sampling_frequency || 'N/A'} Hz</div>
        <div class="metric"><span class="metric-label">Izvor:</span> ${data.signal_info.source || 'N/A'}</div>
    </div>

    <h2>Rezultati Analize</h2>
    <table>
        <tr><th>Parametar</th><th>Vrednost</th><th>Interpretacija</th></tr>
        <tr><td>Prosečna frekvencija</td><td>${data.analysis_results.heart_rate.average_bpm?.toFixed(1) || 'N/A'} bpm</td><td>Srčana frekvencija</td></tr>
        <tr><td>Broj R-pikova</td><td>${data.analysis_results.heart_rate.rr_count || 'N/A'}</td><td>Detektovani otkucaji</td></tr>
        <tr><td>HRV</td><td>${data.analysis_results.heart_rate.heart_rate_variability?.toFixed(1) || 'N/A'} ms</td><td>Varijabilnost ritma</td></tr>
        <tr><td>SNR</td><td>${data.analysis_results.signal_quality.snr_db?.toFixed(1) || 'N/A'} dB</td><td>Kvalitet signala</td></tr>
        <tr><td>Dominantna frekvencija</td><td>${data.analysis_results.fft_analysis.peak_frequency_hz?.toFixed(2) || 'N/A'} Hz</td><td>FFT analiza</td></tr>
    </table>

    <h2>Zaključak</h2>
    <p>Analiza je uspešno demonstrirala primenu Furijeove i Z-transformacije u obradi biomedicinskih signala. 
    Algoritmi za detekciju R-pikova i frekvencijsku analizu pokazali su satisfactorne rezultate.</p>
    
    <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 0.9rem; color: #666;">
        Generisan automatski pomoću EKG analize aplikacije - Master rad "Primena Furijeove i Z-transformacije u analizi biomedicinskih signala"
    </footer>
</body>
</html>`;
    }
}

// =============================
// PDF GENERATION FUNCTIONALITY
// =============================

async function generatePDFReport() {
    const button = event.target;
    const originalText = button.innerHTML;
    
    try {
        // Show loading state
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generišem PDF...';
        button.disabled = true;
        
        // Load html2canvas if not available
        if (typeof html2canvas === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';
            document.head.appendChild(script);
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // Wait for jsPDF to be available
        let attempts = 0;
        while (attempts < 50 && typeof window.jsPDF === 'undefined') {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        // Try different ways to access jsPDF
        let jsPDF;
        if (typeof window.jsPDF === 'function') {
            jsPDF = window.jsPDF;
        } else if (window.jsPDF && typeof window.jsPDF.jsPDF === 'function') {
            jsPDF = window.jsPDF.jsPDF;
        } else if (window.jspdf && typeof window.jspdf.jsPDF === 'function') {
            jsPDF = window.jspdf.jsPDF;
        } else {
            // Fallback: try to load library dynamically
            await new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
                script.onload = () => {
                    setTimeout(resolve, 200);
                };
                script.onerror = reject;
                document.head.appendChild(script);
            });
            
            if (typeof window.jsPDF === 'function') {
                jsPDF = window.jsPDF;
            } else if (window.jsPDF && typeof window.jsPDF.jsPDF === 'function') {
                jsPDF = window.jsPDF.jsPDF;
            } else {
                throw new Error('Cannot load jsPDF library');
            }
        }
        
        const doc = new jsPDF();
        
        // Create hidden container with the export report HTML
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Priprema sadržaj...';
        
        const tempContainer = document.createElement('div');
        tempContainer.style.position = 'fixed';
        tempContainer.style.left = '0';
        tempContainer.style.top = '0';
        tempContainer.style.width = '800px'; // Visible width
        tempContainer.style.height = 'auto';
        tempContainer.style.backgroundColor = 'white';
        tempContainer.style.padding = '20px';
        tempContainer.style.fontFamily = 'Arial, sans-serif';
        tempContainer.style.zIndex = '10000';
        tempContainer.style.overflow = 'visible';
        
        // Use the existing export report functionality with complete HTML content
        console.log('Generating PDF content...', window.ekgAnalyzer);
        
        if (window.ekgAnalyzer && window.ekgAnalyzer.analysisData) {
            console.log('Using ekgAnalyzer with data:', window.ekgAnalyzer.analysisData);
            const fullHTML = window.ekgAnalyzer.createFullReportHTML();
            console.log('Generated HTML length:', fullHTML ? fullHTML.length : 'null');
            tempContainer.innerHTML = fullHTML;
        } else {
            console.log('Falling back to basic content');
            // Enhanced fallback to basic content with visualizations
            const resultsContent = document.getElementById('resultsSection')?.innerHTML || 'No analysis results available';
            const visualizationsContent = document.getElementById('visualizations')?.innerHTML || '';
            
            tempContainer.innerHTML = `
                <div style="max-width: 800px; margin: 0 auto; font-family: Arial, sans-serif; padding: 20px;">
                    <header style="text-align: center; margin-bottom: 40px; border-bottom: 2px solid #2c3e50; padding-bottom: 20px;">
                        <h1 style="color: #2c3e50; margin-bottom: 10px;">EKG Analysis Report v2.9</h1>
                        <p style="color: #7f8c8d;">Generated: ${new Date().toLocaleString()}</p>
                    </header>
                    
                    <section style="margin-bottom: 30px;">
                        <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">Analysis Results</h2>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                            ${resultsContent}
                        </div>
                    </section>
                    
                    ${visualizationsContent ? `
                    <section style="margin-bottom: 30px;">
                        <h2 style="color: #2c3e50; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px;">Generated Visualizations & Diagrams</h2>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                            ${visualizationsContent}
                        </div>
                    </section>
                    ` : ''}
                    
                    <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; text-align: center; font-size: 12px; color: #777;">
                        Generated by EKG Analysis Application v2.9 - Master Thesis Implementation
                    </footer>
                </div>
            `;
        }
        
        document.body.appendChild(tempContainer);
        
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Konvertuje u PDF...';
        
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generiše PDF...';
        
        // Wait a moment for content to render
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        console.log('Starting jsPDF html() method...');
        
        // Use jsPDF html() method like the original Export Report
        await new Promise((resolve, reject) => {
            doc.html(tempContainer, {
                callback: function(doc) {
                    console.log('jsPDF html() completed successfully');
                    resolve(doc);
                },
                margin: [15, 15, 15, 15],
                autoPaging: 'text',
                x: 0,
                y: 0,
                width: 180, // A4 width minus margins
                windowWidth: 800, // Match container width
                html2canvas: {
                    scale: 1,
                    useCORS: true,
                    allowTaint: true,
                    letterRendering: true,
                    logging: true
                }
            });
        });
        
        // Remove temporary container
        document.body.removeChild(tempContainer);
        
        // Save the PDF
        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
        doc.save(`EKG_Analysis_Report_v2.9_${timestamp}.pdf`);
        
        // Show success message
        button.innerHTML = '<i class="fas fa-check"></i> Report Generated!';
        setTimeout(() => {
            button.innerHTML = originalText;
            button.disabled = false;
        }, 3000);
        
    } catch (error) {
        console.error('Error generating PDF:', error);
        
        // Fallback: use browser's built-in print functionality
        try {
            button.innerHTML = '<i class="fas fa-print"></i> Otvaram za štampu...';
            
            // Create a printable version
            const printContent = document.createElement('div');
            printContent.innerHTML = `
                <h1>EKG Signal Analysis Report</h1>
                <p>Generated: ${new Date().toLocaleString()}</p>
                <hr>
                ${document.getElementById('result')?.innerHTML || 'No analysis results available'}
                ${document.getElementById('advancedAnalysisResult')?.innerHTML || ''}
                ${document.getElementById('visualizations')?.innerHTML || ''}
            `;
            
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                <head>
                    <title>EKG Analysis Report</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        h1 { color: #333; }
                        img { max-width: 100%; height: auto; margin: 10px 0; }
                    </style>
                </head>
                <body>${printContent.innerHTML}</body>
                </html>
            `);
            printWindow.document.close();
            printWindow.print();
            
            button.innerHTML = '<i class="fas fa-check"></i> Otvoren za štampu!';
        } catch (fallbackError) {
            console.error('Fallback also failed:', fallbackError);
            button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Greška!';
        }
        
        setTimeout(() => {
            button.innerHTML = originalText;
            button.disabled = false;
        }, 3000);
    }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.ekgAnalyzer = new EKGAnalyzer();
});

// Helper function for lazy loading large images - FIX for broken pipe
window.loadLazyImage = function(key) {
    console.log(`Loading lazy image ${key}`);
    
    const container = document.getElementById(`lazy-image-${key}`);
    if (!container) {
        console.error(`Container for lazy image ${key} not found`);
        return;
    }
    
    const imageData = window.lazyImages && window.lazyImages[key];
    if (!imageData) {
        console.error(`Image data for ${key} not found`);
        container.innerHTML = "<p style=\"color: red;\">Greška: Slika nije pronađena</p>";
        return;
    }
    
    // Show loading spinner
    container.innerHTML = `
        <div style="padding: 40px;">
            <i class="fas fa-spinner fa-spin" style="font-size: 48px; color: #007bff; margin-bottom: 15px;"></i>
            <p style="color: #007bff;">Učitava sliku...</p>
        </div>
    `;
    
    // Load image after short delay to prevent broken pipe
    setTimeout(() => {
        try {
            container.innerHTML = `
                <img src="data:image/png;base64,${imageData}" 
                     style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px;" 
                     alt="Thesis visualization ${key}"
                     loading="lazy">
            `;
            console.log(`✅ Lazy image ${key} loaded successfully`);
        } catch (error) {
            console.error(`❌ Error loading lazy image ${key}:`, error);
            container.innerHTML = "<p style=\"color: red;\">Greška pri učitavanju slike</p>";
        }
    }, 500);
};

console.log("🔧 Broken pipe fix helper functions loaded");


// Edukativne informacije za svaki dijagram - Educational Info System
window.showEducationalInfo = function(vizKey) {
    const educationalContent = {
        "1": {
            title: "📈 EKG Signal sa R-pikovima",
            explanation: `
                <h4>Šta ovaj dijagram prikazuje:</h4>
                <p>Ovaj grafikon prikazuje <strong>električni signal srca (EKG)</strong> u vremenskom domenu, sa automatski detektovanim R-pikovima označenim crvenim krugovima.</p>
                
                <h4>Šta su R-pikovi:</h4>
                <ul>
                    <li><strong>R-pik</strong> = Najveći deo QRS kompleksa, označava kontrakciju komora srca</li>
                    <li><strong>Crveni krugovi</strong> = Automatski detektovani otkucaji srca</li>
                    <li><strong>Vremenski opseg</strong> = Prikazuje prvih 10 sekundi signala</li>
                </ul>
                
                <h4>Kako interpretirati rezultate:</h4>
                <ul>
                    <li><strong>Redovni R-pikovi</strong> = Normalan srčani ritam</li>
                    <li><strong>Neregularni razmaci</strong> = Mogu ukazivati na aritmiju</li>
                    <li><strong>Broj R-pikova</strong> = Broj otkucaja u prikazanom periodu</li>
                </ul>
                
                <h4>Značaj za master rad:</h4>
                <p>Ovaj dijagram demonstrira <strong>detekciju karakterističnih tačaka</strong> u biomedicinskom signalu, što je osnova za dalju analizu pomoću Furijeove i Z-transformacije.</p>
            `
        },
        "2": {
            title: "📊 FFT Spektar (Furijeova Transformacija)",
            explanation: `
                <h4>Šta ovaj dijagram prikazuje:</h4>
                <p>FFT (Fast Fourier Transform) spektar pokazuje <strong>frekvencijski sadržaj</strong> EKG signala - koje frekvencije su prisutne i koliko su jake.</p>
                
                <h4>Delovi dijagrama:</h4>
                <ul>
                    <li><strong>Gornji grafikon</strong> = Ceo spektar (0-10 Hz)</li>
                    <li><strong>Donji grafikon</strong> = Zoom na srčane frekvencije (0.5-3 Hz)</li>
                    <li><strong>Crvena linija</strong> = Dominantna frekvencija (srčana frekvencija)</li>
                    <li><strong>Žuti okvir</strong> = Frekvencija u Hz i pretvorena u bpm</li>
                </ul>
                
                <h4>Kako interpretirati rezultate:</h4>
                <ul>
                    <li><strong>Pik oko 1-2 Hz</strong> = Normalna srčana frekvencija (60-120 bpm)</li>
                    <li><strong>Viši pikovi</strong> = Brža srčana frekvencija (tahikardija)</li>
                    <li><strong>Niži pikovi</strong> = Sporija srčana frekvencija (bradikardija)</li>
                    <li><strong>Više pikova</strong> = Neregularan ritam ili aritmija</li>
                </ul>
                
                <h4>Značaj za master rad:</h4>
                <p><strong>Furijeova transformacija</strong> je ključni alat za analizu biomedicinskih signala jer omogućava prelazak iz vremenskog u frekvencijski domen, gde možemo identifikovati karakteristične frekvencije srčanog ritma.</p>
            `
        },
        "3": {
            title: "🏥 Poređenje sa MIT-BIH Anotacijama",
            explanation: `
                <h4>Šta ovaj dijagram prikazuje:</h4>
                <p>Poređenje između <strong>automatski detektovanih R-pikova</strong> (naš algoritam) i <strong>ekspertskih MIT-BIH anotacija</strong> (medicinski standard).</p>
                
                <h4>Elementi dijagrama:</h4>
                <ul>
                    <li><strong>Crveni krugovi</strong> = Naš algoritam za detekciju R-pikova</li>
                    <li><strong>Zeleni trouglovi</strong> = MIT-BIH ekspertske anotacije</li>
                    <li><strong>Gornji grafikon</strong> = Pregled 30 sekundi</li>
                    <li><strong>Donji grafikon</strong> = Detaljni prikaz prvih 10 sekundi</li>
                </ul>
                
                <h4>Kako interpretirati rezultate:</h4>
                <ul>
                    <li><strong>Poklapanje simbola</strong> = Tačna detekcija (True Positive)</li>
                    <li><strong>Crveni bez zelenog</strong> = Lažna detekcija (False Positive)</li>
                    <li><strong>Zeleni bez crvenog</strong> = Propuštena detekcija (False Negative)</li>
                    <li><strong>Procenat poklapanja</strong> = Tačnost algoritma (±50ms tolerancija)</li>
                </ul>
                
                <h4>MIT-BIH Baza:</h4>
                <p><strong>MIT-BIH Arrhythmia Database</strong> je złoty standard u kardiologiji - sadrži expertski anotirane EKG signale korišćene za validaciju algoritama širom sveta.</p>
                
                <h4>Značaj za master rad:</h4>
                <p>Ovaj dijagram demonstrira <strong>validaciju algoritma</strong> protiv medicinskog standarda, što je ključno za proveru da li transformacije (Furijeova i Z) daju tačne rezultate.</p>
            `
        },
        "4": {
            title: "⚙️ Signal Processing Pipeline (Z-transformacija)",
            explanation: `
                <h4>Šta ovaj dijagram prikazuje:</h4>
                <p>Korake <strong>digitalne obrade signala</strong> korišćenjem Z-transformacije, od sirovog signala do filtriranog rezultata.</p>
                
                <h4>Četiri koraka obrade:</h4>
                <ul>
                    <li><strong>1. Originalni signal</strong> = Sirovi EKG signal sa šumom</li>
                    <li><strong>2. Bandpass filter</strong> = Filtriranje frekvencija (0.5-40 Hz)</li>
                    <li><strong>3. Baseline removal</strong> = Uklanjanje baseline drift-a</li>
                    <li><strong>4. Filter response</strong> = Karakteristika filtera u Z-domenu</li>
                </ul>
                
                <h4>Zašto je filtriranje potrebno:</h4>
                <ul>
                    <li><strong>Šum iz mreže</strong> = 50/60 Hz električna interferencija</li>
                    <li><strong>Pokretni artefakti</strong> = Niške frekvencije od disanja/pokreta</li>
                    <li><strong>Baseline drift</strong> = Sporih promene zbog elektroda</li>
                    <li><strong>Visoke frekvencije</strong> = EMG šum od mišića</li>
                </ul>
                
                <h4>Z-transformacija:</h4>
                <p><strong>Z-transformacija</strong> je matematički alat za analizu i dizajn digitalnih filtara. Omogućava nam da:</p>
                <ul>
                    <li>Analiziramo stabilnost filtera</li>
                    <li>Dizajniramo optimalne karakteristike</li>
                    <li>Kontrolišemo faze i magnitude odgovor</li>
                </ul>
                
                <h4>Značaj za master rad:</h4>
                <p>Ovaj dijagram demonstrira primenu <strong>Z-transformacije u biomedicinskim signalima</strong> - kako se koristi za kreiranje filtara koji čiste EKG signal za dalju analizu.</p>
            `
        }
    };
    
    const content = educationalContent[vizKey];
    if (!content) {
        alert("Edukativne informacije nisu dostupne za ovaj dijagram.");
        return;
    }
    
    // Kreiraj modal za prikaz edukativnih informacija
    const modal = document.createElement("div");
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        box-sizing: border-box;
    `;
    
    modal.innerHTML = `
        <div style="
            background: white;
            border-radius: 12px;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            position: relative;
        ">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #3498db; padding-bottom: 15px;">
                <h2 style="margin: 0; color: #2c3e50;">${content.title}</h2>
                <button onclick="this.parentElement.parentElement.parentElement.remove()" 
                        style="background: #e74c3c; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer; font-size: 18px; font-weight: bold;">
                    ×
                </button>
            </div>
            <div style="line-height: 1.6; color: #2c3e50;">
                ${content.explanation}
            </div>
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #bdc3c7;">
                <button onclick="this.parentElement.parentElement.parentElement.remove()" 
                        style="background: #3498db; color: white; border: none; padding: 12px 30px; border-radius: 6px; cursor: pointer; font-size: 16px;">
                    Zatvoři
                </button>
            </div>
        </div>
    `;
    
    // Zatvaranje na klik van modal-a
    modal.addEventListener("click", function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
    
    document.body.appendChild(modal);
};

console.log("🎓 Educational info system loaded - Interactive diagram explanations available");


// 🎓 EDUKATIVNI SISTEM ZA DIJAGRAME - Educational Info System
// Dodaje "i" dugme pored svakog dijagrama sa detaljnim objašnjenjem

window.showEducationalInfo = function(vizKey, vizTitle, vizDescription) {
    console.log('🎓 showEducationalInfo called with:', {vizKey, vizTitle, vizDescription});
    
    // Generiši specifično objašnjenje na osnovu stvarnog sadržaja dijagrama
    function generateSpecificExplanation(vizKey, vizTitle, vizDescription) {
        const title = vizTitle || '';
        const description = vizDescription || '';
        
        // Analiza sadržaja dijagrama za specifično objašnjenje
        if (vizKey === "1" || title.includes("R-pik") || title.includes("Signal")) {
            return {
                title: "📈 " + title,
                explanation: `
                    <h4>Analiza ovog konkretnog dijagrama:</h4>
                    <p><strong>Naslov:</strong> ${title}</p>
                    <p><strong>Opis:</strong> ${description}</p>
                    
                    <h4>Šta vidite na ovom dijagramu:</h4>
                    <ul>
                        <li><strong>Plava linija</strong> = Vaš EKG signal u vremenskom domenu</li>
                        <li><strong>Crveni krugovi</strong> = Automatski detektovani R-pikovi (otkucaji srca)</li>
                        <li><strong>X-osa</strong> = Vreme u sekundama</li>
                        <li><strong>Y-osa</strong> = Amplituda EKG signala (mV)</li>
                    </ul>
                    
                    <h4>Kako čitati rezultate:</h4>
                    <ul>
                        <li><strong>Broj crvenih krugova</strong> = Broj detektovanih otkucaja srca</li>
                        <li><strong>Razmak između krugova</strong> = Regularnost srčanog ritma</li>
                        <li><strong>Visina R-pikova</strong> = Snaga srčane kontrakcije</li>
                    </ul>
                    
                    <h4>Vaš specifični rezultat:</h4>
                    <p>Na ovom dijagramu možete videti kako algoritam detektuje karakteristične tačke vašeg EKG signala. Ovo je prvi korak u kompleksnoj analizi koji omogućava dalje računanje srčane frekvencije i detekciju aritmija.</p>
                `
            };
        }
        
        if (vizKey === "2" || title.includes("FFT") || title.includes("Furier")) {
            return {
                title: "📊 " + title,
                explanation: `
                    <h4>Analiza ovog konkretnog FFT spektra:</h4>
                    <p><strong>Naslov:</strong> ${title}</p>
                    <p><strong>Opis:</strong> ${description}</p>
                    
                    <h4>Šta vidite na ovom dijagramu:</h4>
                    <ul>
                        <li><strong>Gornji grafikon</strong> = Kompletni frekvencijski spektar vašeg EKG-a</li>
                        <li><strong>Donji grafikon</strong> = Uvećan prikaz srčanih frekvencija (0.5-3 Hz)</li>
                        <li><strong>Crvena vertikalna linija</strong> = Dominantna frekvencija vašeg srca</li>
                        <li><strong>Žuti okvir</strong> = Izračunata srčana frekvencija iz FFT-a</li>
                    </ul>
                    
                    <h4>Kako interpretirati vaš rezultat:</h4>
                    <ul>
                        <li><strong>Najviši pik</strong> = Glavna frekvencija vašeg srčanog ritma</li>
                        <li><strong>Širina pika</strong> = Varijabilnost srčane frekvencije</li>
                        <li><strong>Dodatni pikovi</strong> = Mogu ukazivati na irregularnosti</li>
                    </ul>
                    
                    <h4>Vaš specifični rezultat:</h4>
                    <p>Furijeova transformacija vašeg EKG signala pokazuje dominantne frekvencije. Ovo omogućava precizno računanje srčane frekvencije i detekciju ritmičkih poremećaja koji možda nisu vidljivi u vremenskom domenu.</p>
                `
            };
        }
        
        if (vizKey === "3" || title.includes("MIT-BIH") || title.includes("Poređenje")) {
            return {
                title: "🏥 " + title,
                explanation: `
                    <h4>Analiza ovog konkretnog poređenja:</h4>
                    <p><strong>Naslov:</strong> ${title}</p>
                    <p><strong>Opis:</strong> ${description}</p>
                    
                    <h4>Šta vidite na ovom dijagramu:</h4>
                    <ul>
                        <li><strong>Plava linija</strong> = Vaš EKG signal</li>
                        <li><strong>Crveni krugovi</strong> = R-pikovi detektovani našim algoritmom na vašem signalu</li>
                        <li><strong>Zeleni trouglovi</strong> = Ekspertske MIT-BIH anotacije (ili sintetičke anotacije)</li>
                        <li><strong>Gornji panel</strong> = Pregled dugog segmenta</li>
                        <li><strong>Donji panel</strong> = Detaljni prikaz kratkog segmenta</li>
                    </ul>
                    
                    <h4>Kako oceniti tačnost na vašem signalu:</h4>
                    <ul>
                        <li><strong>Poklapanje simbola</strong> = Tačna detekcija R-pika</li>
                        <li><strong>Crveni bez zelenog</strong> = Lažno pozitivan rezultat</li>
                        <li><strong>Zeleni bez crvenog</strong> = Propušteni R-pik</li>
                        <li><strong>Bliskost simbola</strong> = Prihvatljiva tolerancija (±50ms)</li>
                    </ul>
                    
                    <h4>Vaš specifični rezultat:</h4>
                    <p>Ovaj dijagram pokazuje koliko je tačan algoritam na vašem konkretnom EKG signalu. Validacija protiv MIT-BIH standarda omogućava objektivnu procenu kvaliteta automatske detekcije R-pikova.</p>
                `
            };
        }
        
        if (vizKey === "4" || title.includes("Pipeline") || title.includes("Processing")) {
            return {
                title: "⚙️ " + title,
                explanation: `
                    <h4>Analiza obrade vašeg konkretnog signala:</h4>
                    <p><strong>Naslov:</strong> ${title}</p>
                    <p><strong>Opis:</strong> ${description}</p>
                    
                    <h4>Šta vidite na ovom dijagramu:</h4>
                    <ul>
                        <li><strong>Panel 1</strong> = Vaš originalni EKG signal (pre obrade)</li>
                        <li><strong>Panel 2</strong> = Signal nakon bandpass filtera (0.5-40 Hz)</li>
                        <li><strong>Panel 3</strong> = Signal nakon uklanjanja baseline drift-a</li>
                        <li><strong>Panel 4</strong> = Karakteristika Z-filtera korišćenog za obradu</li>
                    </ul>
                    
                    <h4>Transformacije primenjene na vaš signal:</h4>
                    <ul>
                        <li><strong>Bandpass filter</strong> = Uklanja šum ispod 0.5 Hz i iznad 40 Hz</li>
                        <li><strong>Baseline korekcija</strong> = Stabilizuje nulu referentnu liniju</li>
                        <li><strong>Z-transformacija</strong> = Matemtički alat za dizajn filtera</li>
                    </ul>
                    
                    <h4>Efekat na vaš specifični signal:</h4>
                    <p>Možete videti kako se vaš EKG signal čisti kroz korake obrade. Svaki panel pokazuje progresivno poboljšanje kvaliteta signala, omogućavajući precizniju detekciju R-pikova i bolju analizu.</p>
                    
                    <h4>Z-transformacija:</h4>
                    <p>Poslednji panel pokazuje frekvencijski odgovor filtera korišćenog za vaš signal, demonstrirajući kako Z-transformacija omogućava kreiranje optimalnih digitalnih filtara.</p>
                `
            };
        }
        
        // Fallback za nepoznate dijagrame
        return {
            title: title || "Dijagram",
            explanation: `
                <h4>Analiza ovog dijagrama:</h4>
                <p><strong>Naslov:</strong> ${title}</p>
                <p><strong>Opis:</strong> ${description}</p>
                
                <h4>Opšte informacije:</h4>
                <p>Ovaj dijagram je deo master rada koji demonstrira primenu Furijeove i Z-transformacije u analizi biomedicinskih signala.</p>
                
                <h4>Kontekst:</h4>
                <p>Svaki dijagram pokazuje različit aspekt obrade i analize EKG signala, doprinoseći ukupnom razumevanju srčane aktivnosti.</p>
            `
        };
    }
    
    const content = generateSpecificExplanation(vizKey, vizTitle || '', vizDescription || '');
    
    if (!content) {
        alert("Edukativne informacije nisu dostupne za ovaj dijagram.");
        return;
    }
    
    // Kreiraj modal za prikaz edukativnih informacija
    const modal = document.createElement("div");
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        box-sizing: border-box;
    `;
    
    modal.innerHTML = `
        <div style="
            background: white;
            border-radius: 12px;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            position: relative;
        ">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #3498db; padding-bottom: 15px;">
                <h2 style="margin: 0; color: #2c3e50;">${content.title}</h2>
                <button onclick="this.parentElement.parentElement.parentElement.remove()" 
                        style="background: #e74c3c; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer; font-size: 18px; font-weight: bold;">
                    ×
                </button>
            </div>
            <div style="line-height: 1.6; color: #2c3e50;">
                ${content.explanation}
            </div>
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #bdc3c7;">
                <button onclick="this.parentElement.parentElement.parentElement.remove()" 
                        style="background: #3498db; color: white; border: none; padding: 12px 30px; border-radius: 6px; cursor: pointer; font-size: 16px;">
                    Zatvori
                </button>
            </div>
        </div>
    `;
    
    // Zatvaranje na klik van modal-a
    modal.addEventListener("click", function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
    
    document.body.appendChild(modal);
};

// MODIFIKACIJA addThesisVisualizations da uključi "i" dugme
// Pazi: Ova funkcija se izvršava posle učitavanja vizualizacija
document.addEventListener("DOMContentLoaded", function() {
    // Hook u postojeću funkciju kada se dodaju dijagrami
    const originalMethod = window.EKGAnalyzer ? window.EKGAnalyzer.prototype.addThesisVisualizations : null;
    
    // Alternativa: Dodaj observer koji prati kada se kreiraju thesis-visualization elementi
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
                if (node.nodeType === 1 && node.classList && node.classList.contains("thesis-visualization")) {
                    addInfoButtonToVisualization(node);
                }
            });
        });
    });
    
    // Pokreni observer na ceo dokument
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
});

// Funkcija za dodavanje "i" dugmeta na postojeće vizualizacije
function addInfoButtonToVisualization(vizElement) {
    // Pronađi h4 element (naslov dijagrama)
    const titleElement = vizElement.querySelector("h4");
    if (!titleElement) return;
    
    // Proveri da li već postoji "i" dugme
    if (vizElement.querySelector(".educational-info-btn")) return;
    
    // Ekstraktuj ključ dijagrama iz naslova
    let vizKey = "1"; // default
    const titleText = titleElement.textContent;
    if (titleText.includes("1.") || titleText.includes("R-pik")) vizKey = "1";
    else if (titleText.includes("2.") || titleText.includes("FFT")) vizKey = "2";
    else if (titleText.includes("3.") || titleText.includes("MIT-BIH")) vizKey = "3";
    else if (titleText.includes("4.") || titleText.includes("Pipeline")) vizKey = "4";
    
    // Kreiraj wrapper div oko naslova
    const titleWrapper = document.createElement("div");
    titleWrapper.style.cssText = "display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;";
    
    // Premesti naslov u wrapper i resetuj margin
    titleElement.style.margin = "0";
    titleElement.parentNode.insertBefore(titleWrapper, titleElement);
    titleWrapper.appendChild(titleElement);
    
    // Kreiraj "i" dugme
    const infoButton = document.createElement("button");
    infoButton.className = "educational-info-btn";
    infoButton.style.cssText = `
        background: #3498db;
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    `;
    infoButton.textContent = "i";
    infoButton.title = "Kliknite za edukativno objašnjenje";
    infoButton.onclick = function() { window.showEducationalInfo(vizKey); };
    
    titleWrapper.appendChild(infoButton);
    
    console.log(`🎓 Added educational info button to visualization ${vizKey}`);
}

console.log("🎓 Educational info system loaded - Interactive diagram explanations available");

// 🔧 PATCH: Dodaj "i" dugme direktno u addThesisVisualizations funkciju
// Ovaj kod se izvršava nakon učitavanja i automatski dodaje "i" dugme

setTimeout(function() {
    // Hook u postojeću funkciju addThesisVisualizations
    if (window.EKGAnalyzer) {
        const originalAddThesis = EKGAnalyzer.prototype.addThesisVisualizations;
        
        EKGAnalyzer.prototype.addThesisVisualizations = function(visualizations) {
            console.log("🎓 Patched addThesisVisualizations called");
            
            // Pozovi originalnu funkciju
            const result = originalAddThesis.call(this, visualizations);
            
            // Dodaj "i" dugmeta nakon kratke pauze
            setTimeout(() => {
                const vizElements = document.querySelectorAll(".thesis-visualization");
                console.log(`🎓 Found ${vizElements.length} thesis visualizations to patch`);
                
                vizElements.forEach((element, index) => {
                    const key = String(index + 1); // 1, 2, 3, 4
                    const titleElement = element.querySelector("h4");
                    
                    if (titleElement && !element.querySelector(".educational-info-btn")) {
                        const vizTitle = titleElement.textContent || "";
                        const vizDesc = element.querySelector("p") ? element.querySelector("p").textContent : "";
                        
                        // Kreiraj wrapper div oko naslova
                        const titleWrapper = document.createElement("div");
                        titleWrapper.style.cssText = "display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;";
                        
                        // Premesti naslov u wrapper i resetuj margin
                        titleElement.style.margin = "0";
                        titleElement.parentNode.insertBefore(titleWrapper, titleElement);
                        titleWrapper.appendChild(titleElement);
                        
                        // Kreiraj "i" dugme
                        const infoButton = document.createElement("button");
                        infoButton.className = "educational-info-btn";
                        infoButton.style.cssText = `
                            background: #3498db;
                            color: white;
                            border: none;
                            border-radius: 50%;
                            width: 24px;
                            height: 24px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: bold;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            flex-shrink: 0;
                        `;
                        infoButton.textContent = "i";
                        infoButton.title = "Kliknite za objašnjenje ovog dijagrama";
                        infoButton.onclick = function() { 
                            window.showEducationalInfo(key, vizTitle, vizDesc); 
                        };
                        
                        titleWrapper.appendChild(infoButton);
                        
                        console.log(`🎓 Added educational info button to visualization ${key}: ${vizTitle}`);
                    }
                });
            }, 100);
            
            return result;
        };
        
        console.log("🎓 Successfully patched addThesisVisualizations function");
    }
}, 1000);

console.log("🎓 Educational system patch loaded - will add i buttons to all diagrams");
// DIREKTNA ZAMENA za addThesisVisualizations sa "i" dugmetom

// Ova funkcija će zameniti postojeću addThesisVisualizations funkciju
function patchAddThesisVisualizationsWithInfoButtons() {
    if (typeof EKGAnalyzer !== 'undefined' && EKGAnalyzer.prototype.addThesisVisualizations) {
        console.log('🔧 Patching addThesisVisualizations with info buttons...');
        
        // Sačuvaj originalnu funkciju
        const originalFunction = EKGAnalyzer.prototype.addThesisVisualizations;
        
        // Zameni sa novom funkcijom
        EKGAnalyzer.prototype.addThesisVisualizations = function(visualizations) {
            console.log('🎯 v3.1 Starting addThesisVisualizations - WITH INFO BUTTONS');
            console.log('Received visualizations:', visualizations);
            
            try {
                // Validacija da visualizations objekat postoji
                if (!visualizations || typeof visualizations !== 'object') {
                    console.log('❌ Invalid visualizations object');
                    return;
                }
                
                // Proverava da li postoje vizuelizacije
                const vizData = visualizations.visualizations || {};
                const vizKeys = Object.keys(vizData);
                
                if (vizKeys.length === 0) {
                    console.log('❌ No visualizations found');
                    return;
                }
                
                console.log(`📊 Found ${vizKeys.length} visualizations:`, vizKeys);
                
                // Kreiranje thesis vizuelizacije sekcije
                let thesisSection = document.getElementById('thesisVisualizationsSection');
                if (!thesisSection) {
                    thesisSection = document.createElement('div');
                    thesisSection.id = 'thesisVisualizationsSection';
                    thesisSection.className = 'main-card';
                    thesisSection.style.marginTop = '20px';
                    
                    // Dodaj nakon resultsSection
                    const resultsSection = document.getElementById('resultsSection');
                    if (resultsSection) {
                        resultsSection.parentNode.insertBefore(thesisSection, resultsSection.nextSibling);
                    } else {
                        document.body.appendChild(thesisSection);
                    }
                }
                
                // Header za thesis vizuelizacije
                let headerHTML = `
                    <h2><i class="fas fa-chart-line"></i> Master Rad Vizuelizacije</h2>
                    <div class="result-card">
                        <div class="result-header">
                            <i class="fas fa-graduation-cap result-icon" style="color: #9b59b6;"></i>
                            <h3 class="result-title">Furijeova i Z-transformacija u analizi biomedicinskih signala</h3>
                        </div>
                        <div class="result-content">
                            <p><strong>Opisna statistika:</strong> ${visualizations.description || 'N/A'}</p>
                            <p><strong>Napomena:</strong> ${visualizations.subtitle || 'N/A'}</p>
                            <div id="visualizationsContainer" style="margin-top: 20px;">
                `;
                
                // Dodaj svaku vizuelizaciju SA "i" DUGMETOM
                vizKeys.forEach((key, index) => {
                    const viz = vizData[key];
                    console.log(`📊 v3.1 Adding visualization ${key}: ${viz.title}`);
                    
                    // KREIRAJ DIV SA "i" DUGMETOM
                    headerHTML += `
                        <div class="thesis-visualization" style="margin-bottom: 30px; border: 1px solid #ddd; border-radius: 8px; padding: 15px; position: relative;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                <h4 style="color: #2c3e50; margin: 0;">${viz.title || `Vizuelizacija ${key}`}</h4>
                                <button onclick="window.showEducationalInfo('${key}', '${(viz.title || '').replace(/'/g, "\\'")}', '${(viz.description || '').replace(/'/g, "\\'")}')" 
                                        style="background: #3498db; color: white; border: none; border-radius: 50%; width: 24px; height: 24px; cursor: pointer; font-size: 14px; font-weight: bold; display: flex; align-items: center; justify-content: center; flex-shrink: 0;"
                                        title="Kliknite za objašnjenje ovog dijagrama">
                                    i
                                </button>
                            </div>
                            <p style="margin-bottom: 15px; color: #666;">${viz.description || 'Nema opisa'}</p>
                    `;
                    
                    // DODAJ SLIKU (postojeći kod)
                    if (viz.image_base64) {
                        const imageSize = viz.image_base64.length;
                        console.log(`Image ${key} size: ${imageSize} characters`);
                        
                        // Ako je slika prevetika, koristi lazy loading
                        if (imageSize > 150000) {
                            console.log(`⚠️ Large image detected for viz ${key}, using lazy loading`);
                            headerHTML += `
                                <div style="text-align: center; margin: 15px 0;">
                                    <div id="lazy-image-${key}" style="padding: 40px; background: #f8f9fa; border-radius: 8px; border: 2px dashed #dee2e6;">
                                        <i class="fas fa-image" style="font-size: 48px; color: #6c757d; margin-bottom: 15px;"></i>
                                        <p style="color: #6c757d; margin-bottom: 15px;">Velika slika - kliknite da učitate (${Math.round(imageSize/1024)}KB)</p>
                                        <button class="btn btn-primary" onclick="window.loadLazyImage('${key}')">
                                            <i class="fas fa-download"></i> Učitaj Sliku
                                        </button>
                                    </div>
                                </div>
                            `;
                            
                            // Sačuvaj sliku za lazy loading
                            window.lazyImages = window.lazyImages || {};
                            window.lazyImages[key] = viz.image_base64;
                        } else {
                            // Normalna slika - učitaj odmah
                            headerHTML += `
                                <div style="text-align: center; margin: 15px 0;">
                                    <img src="data:image/png;base64,${viz.image_base64}" 
                                         style="max-width: 100%; border: 2px solid #ddd; border-radius: 8px;" 
                                         alt="${viz.title}"
                                         loading="lazy">
                                </div>
                            `;
                        }
                    } else {
                        // Nema slike
                        headerHTML += `
                            <div style="text-align: center; margin: 15px 0;">
                                <div style="padding: 40px; background: #fff3cd; border-radius: 8px; border: 2px dashed #ffc107;">
                                    <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: #856404; margin-bottom: 15px;"></i>
                                    <p style="color: #856404;">Slika nije dostupna</p>
                                </div>
                            </div>
                        `;
                    }
                    
                    headerHTML += `
                            <p style="font-style: italic; color: #666; margin-top: 15px; text-align: center;">
                                ${viz.caption || ''}
                            </p>
                        </div>
                    `;
                });
                
                headerHTML += `
                            </div>
                        </div>
                    </div>
                `;
                
                // POSTAVI HTML
                console.log('🔄 Setting HTML content...');
                thesisSection.innerHTML = headerHTML;
                
                // Scroll do nove sekcije
                setTimeout(() => {
                    thesisSection.scrollIntoView({ behavior: 'smooth' });
                }, 100);
                
                console.log('✅ Thesis visualizations added WITH INFO BUTTONS');
                
            } catch (error) {
                console.error('❌ Error in addThesisVisualizations:', error);
                this.showError(`Greška u vizuelizacijama: ${error.message}`);
            }
        };
        
        console.log('✅ Successfully patched addThesisVisualizations with info buttons!');
        return true;
    }
    return false;
}

// Pokreni patch kada se učita stranica
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(patchAddThesisVisualizationsWithInfoButtons, 1000);
    });
} else {
    setTimeout(patchAddThesisVisualizationsWithInfoButtons, 1000);
}

console.log('🎓 Educational info patch loaded - will override addThesisVisualizations');
    
    addSystematicEKGAnalysis(data) {
        // Kreiraj sekciju za sistematsku EKG analizu
        let systematicSection = document.getElementById("systematicEKGSection");
        if (systematicSection) {
            systematicSection.remove();
        }
        
        systematicSection = document.createElement("div");
        systematicSection.id = "systematicEKGSection";
        systematicSection.className = "main-card";
        systematicSection.style.marginTop = "20px";
        
        const resultsSection = document.getElementById("resultsSection");
        resultsSection.parentNode.insertBefore(systematicSection, resultsSection.nextSibling);
        
        // Izračunaj sistematske podatke
        const heartRate = data.arrhythmia_detection?.heart_rate;
        const avgBpm = heartRate?.average_bpm || 0;
        const arrhythmias = data.arrhythmia_detection?.arrhythmias?.detected || [];
        const rhythmType = arrhythmias.length > 0 ? "irregular" : "regular";
        
        // Generiši rate kategoriju
        let rateCategory = "Nepoznato";
        let rateColor = "#666";
        if (avgBpm > 0) {
            if (avgBpm < 60) {
                rateCategory = "< 60 - Bradikardija";
                rateColor = "#e74c3c";
            } else if (avgBpm >= 60 && avgBpm <= 100) {
                rateCategory = "60-100 - Normalna";
                rateColor = "#27ae60";
            } else if (avgBpm > 100 && avgBpm <= 150) {
                rateCategory = "100-150 - Blaga tahikardija";
                rateColor = "#f39c12";
            } else {
                rateCategory = "> 150 - Tahikardija";
                rateColor = "#e74c3c";
            }
        }
        
        // Generiši rhythm analizu
        let rhythmAnalysis = "Pravilan";
        let rhythmColor = "#27ae60";
        if (rhythmType === "irregular") {
            rhythmAnalysis = "Nepravilno nepravilan";
            rhythmColor = "#e74c3c";
        }
        
        // Generiši interpretaciju
        let interpretation = "";
        if (rhythmType === "irregular") {
            interpretation = "Mogući nalaz: Atrijska fibrilacija - Nepravilno nepravilan ritam sa polimorfnim P-talasima";
        } else {
            interpretation = "Nalaz: Sinusni ritam - Pravilan ritam sa normalnim P-talasima";
        }
        
        systematicSection.innerHTML = `
            <h2><i class="fas fa-stethoscope"></i> Sistematska EKG Analiza</h2>
            
            <div class="result-card">
                <div class="result-header">
                    <i class="fas fa-clipboard-list result-icon" style="color: #8e44ad;"></i>
                    <h3 class="result-title">Klinička Interpretacija</h3>
                </div>
                <div class="result-content">
                    <div style="display: grid; grid-template-columns: 1fr 2fr; gap: 20px; margin-bottom: 20px;">
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                            <h4 style="margin: 0 0 15px 0; color: #2c3e50;">📋 Sistematski Pregled</h4>
                            <div style="display: grid; gap: 10px;">
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid ${rateColor};">
                                    <strong>Frekvencija:</strong>
                                    <span style="color: ${rateColor};">${avgBpm ? Math.round(avgBpm) : "N/A"} otkucaja/min</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid ${rhythmColor};">
                                    <strong>Ritam:</strong>
                                    <span style="color: ${rhythmColor};">${rhythmAnalysis}</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid #27ae60;">
                                    <strong>Osa:</strong>
                                    <span style="color: #27ae60;">Normalna</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid ${rhythmType === "irregular" ? "#e74c3c" : "#27ae60"};">
                                    <strong>PR/P talas:</strong>
                                    <span style="color: ${rhythmType === "irregular" ? "#e74c3c" : "#27ae60"};">${rhythmType === "irregular" ? "Polimorfni P-talasi" : "Normalni P-talasi"}</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid #27ae60;">
                                    <strong>QRS:</strong>
                                    <span style="color: #27ae60;">Uzak</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid #27ae60;">
                                    <strong>ST/T talas:</strong>
                                    <span style="color: #27ae60;">Normalan</span>
                                </div>
                                <div style="display: flex; justify-content: space-between; padding: 8px; background: white; border-radius: 4px; border-left: 4px solid #27ae60;">
                                    <strong>QTc/ostalo:</strong>
                                    <span style="color: #27ae60;">Normalan</span>
                                </div>
                            </div>
                        </div>
                        
                        <div style="background: #e8f5e8; padding: 15px; border-radius: 8px;">
                            <h4 style="margin: 0 0 15px 0; color: #2c3e50;">🏥 Klinička Interpretacija</h4>
                            <div style="font-size: 16px; line-height: 1.6;">
                                <p><strong>Kategorija frekvencije:</strong> 
                                    <span style="color: ${rateColor}; font-weight: bold;">${rateCategory}</span>
                                </p>
                                
                                <div style="background: ${rhythmType === "irregular" ? "#fff3cd" : "#d4edda"}; padding: 12px; border-radius: 6px; border-left: 4px solid ${rhythmType === "irregular" ? "#ffc107" : "#28a745"}; margin: 15px 0;">
                                    <strong>${rhythmType === "irregular" ? "⚠️" : "✅"} ${interpretation}</strong>
                                </div>
                                
                                <p><strong>Preporučene dalje akcije:</strong></p>
                                <ul style="margin: 10px 0; padding-left: 20px;">
                                    ${avgBpm > 150 ? "<li>Hitna kardiološka konsultacija</li>" : ""}
                                    ${rhythmType === "irregular" ? "<li>EKG u 12 odvoda za potvrdu</li>" : ""}
                                    ${avgBpm < 60 ? "<li>Provera simptoma bradikardije</li>" : ""}
                                    <li>Redovna kontrola u skladu sa kliničkim stanjem</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    
                    <div style="background: #f0f8ff; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;">
                        <h4 style="margin: 0 0 10px 0; color: #2c3e50;">ℹ️ Napomena</h4>
                        <p style="margin: 0; font-style: italic; color: #666;">
                            Ova analiza je generisana automatski na osnovu detektovanih parametara. 
                            Za konačnu dijagnozu i terapiju obratite se lekaru specijalistu.
                        </p>
                    </div>
                </div>
            </div>
        `;
        
        systematicSection.style.display = "block";
        console.log("✅ Systematic EKG analysis added");
    }
